<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg
   xmlns:ooo="http://xml.openoffice.org/svg/export"
   xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmlns:cc="http://creativecommons.org/ns#"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   version="1.2"
   viewBox="0 0 990 765"
   preserveAspectRatio="xMidYMid"
   xml:space="preserve"
   id="svg9213"
   inkscape:version="0.91 r"
   sodipodi:docname="hw-tabulation.svg"
   width="11in"
   height="8.5in"
   style="fill-rule:evenodd;stroke-width:28.22200012;stroke-linejoin:round"><metadata
     id="metadata9643"><rdf:RDF><cc:Work
         rdf:about=""><dc:format>image/svg+xml</dc:format><dc:type
           rdf:resource="http://purl.org/dc/dcmitype/StillImage" /><dc:title></dc:title><cc:license
           rdf:resource="http://creativecommons.org/publicdomain/zero/1.0/" /></cc:Work><cc:License
         rdf:about="http://creativecommons.org/publicdomain/zero/1.0/"><cc:permits
           rdf:resource="http://creativecommons.org/ns#Reproduction" /><cc:permits
           rdf:resource="http://creativecommons.org/ns#Distribution" /><cc:permits
           rdf:resource="http://creativecommons.org/ns#DerivativeWorks" /></cc:License></rdf:RDF></metadata><sodipodi:namedview
     pagecolor="#ffffff"
     bordercolor="#666666"
     borderopacity="1"
     objecttolerance="10"
     gridtolerance="10"
     guidetolerance="10"
     inkscape:pageopacity="0"
     inkscape:pageshadow="2"
     inkscape:window-width="1680"
     inkscape:window-height="998"
     id="namedview9641"
     showgrid="false"
     units="in"
     inkscape:zoom="0.45254834"
     inkscape:cx="433.71427"
     inkscape:cy="131.55008"
     inkscape:window-x="0"
     inkscape:window-y="0"
     inkscape:window-maximized="1"
     inkscape:current-layer="svg9213" /><defs
     class="ClipPathGroup"
     id="defs9215"><clipPath
       id="presentation_clip_path"
       clipPathUnits="userSpaceOnUse"><rect
         x="0"
         y="0"
         width="28000"
         height="21000"
         id="rect9218" /></clipPath><clipPath
       id="presentation_clip_path_shrink"
       clipPathUnits="userSpaceOnUse"><rect
         x="28"
         y="21"
         width="27944"
         height="20958"
         id="rect9221" /></clipPath></defs><defs
     id="defs9223"><g
       id="ooo:meta_slides"
       ooo:number-of-slides="1"
       ooo:start-slide-number="0"><g
         id="ooo:meta_dummy_slide"
         ooo:slide="dummy-slide"
         ooo:master="dummy-master-page"
         ooo:background-visibility="hidden"
         ooo:master-objects-visibility="hidden"
         ooo:has-transition="false" /><g
         id="ooo:meta_slide_0"
         ooo:slide="id1"
         ooo:master="id2"
         ooo:has-transition="true" /></g></defs><defs
     id="presentation-animations" /><defs
     id="defs9229"><font
       id="EmbeddedFont_1"
       horiz-adv-x="2048"
       horiz-origin-x="0"
       horiz-origin-y="0"
       vert-origin-x="45"
       vert-origin-y="90"
       vert-adv-y="90"><font-face
         font-family="Liberation Sans embedded"
         units-per-em="2048"
         font-weight="normal"
         font-style="normal"
         ascent="1826"
         descent="423"
         id="font-face9232" /><missing-glyph
         horiz-adv-x="2048"
         d="M 0,0 L 2047,0 2047,2047 0,2047 0,0 Z"
         id="missing-glyph9234" /><glyph
         unicode="x"
         horiz-adv-x="1033"
         d="M 801,0 L 510,444 217,0 23,0 408,556 41,1082 240,1082 510,661 778,1082 979,1082 612,558 1002,0 801,0 Z"
         id="glyph9236" /><glyph
         unicode="v"
         horiz-adv-x="1059"
         d="M 613,0 L 400,0 7,1082 199,1082 437,378 C 442,363 447,346 454,325 460,304 466,282 473,259 480,236 486,215 492,194 497,173 502,155 506,141 510,155 515,173 522,194 528,215 534,236 541,258 548,280 555,302 562,323 569,344 575,361 580,376 L 826,1082 1017,1082 613,0 Z"
         id="glyph9238" /><glyph
         unicode="u"
         horiz-adv-x="901"
         d="M 314,1082 L 314,396 C 314,343 318,299 326,264 333,229 346,200 363,179 380,157 403,142 432,133 460,124 495,119 537,119 580,119 618,127 653,142 687,157 716,178 741,207 765,235 784,270 797,312 810,353 817,401 817,455 L 817,1082 997,1082 997,231 C 997,208 997,185 998,160 998,135 998,111 999,89 1000,66 1000,47 1001,31 1002,15 1002,5 1003,0 L 833,0 C 832,3 832,12 831,27 830,42 830,59 829,78 828,97 827,116 826,136 825,155 825,172 825,185 L 822,185 C 805,154 786,125 765,100 744,75 720,53 693,36 666,18 634,4 599,-6 564,-15 523,-20 476,-20 416,-20 364,-13 321,2 278,17 242,39 214,70 186,101 166,140 153,188 140,236 133,294 133,361 L 133,1082 314,1082 Z"
         id="glyph9240" /><glyph
         unicode="t"
         horiz-adv-x="531"
         d="M 554,8 C 527,1 499,-5 471,-10 442,-14 409,-16 372,-16 228,-16 156,66 156,229 L 156,951 31,951 31,1082 163,1082 216,1324 336,1324 336,1082 536,1082 536,951 336,951 336,268 C 336,216 345,180 362,159 379,138 408,127 450,127 467,127 484,128 501,131 517,134 535,137 554,141 L 554,8 Z"
         id="glyph9242" /><glyph
         unicode="r"
         horiz-adv-x="556"
         d="M 142,0 L 142,830 C 142,853 142,876 142,900 141,923 141,946 140,968 139,990 139,1011 138,1030 137,1049 137,1067 136,1082 L 306,1082 C 307,1067 308,1049 309,1030 310,1010 311,990 312,969 313,948 313,929 314,910 314,891 314,874 314,861 L 318,861 C 331,902 344,938 359,969 373,999 390,1024 409,1044 428,1063 451,1078 478,1088 505,1097 537,1102 575,1102 590,1102 604,1101 617,1099 630,1096 641,1094 648,1092 L 648,927 C 636,930 622,933 606,935 590,936 572,937 552,937 511,937 476,928 447,909 418,890 394,865 376,832 357,799 344,759 335,714 326,668 322,618 322,564 L 322,0 142,0 Z"
         id="glyph9244" /><glyph
         unicode="o"
         horiz-adv-x="980"
         d="M 1053,542 C 1053,353 1011,212 928,119 845,26 724,-20 565,-20 490,-20 422,-9 363,14 304,37 254,71 213,118 172,165 140,223 119,294 97,364 86,447 86,542 86,915 248,1102 571,1102 655,1102 728,1090 789,1067 850,1044 900,1009 939,962 978,915 1006,857 1025,787 1044,717 1053,635 1053,542 Z M 864,542 C 864,626 858,695 845,750 832,805 813,848 788,881 763,914 732,937 696,950 660,963 619,969 574,969 528,969 487,962 450,949 413,935 381,912 355,879 329,846 309,802 296,747 282,692 275,624 275,542 275,458 282,389 297,334 312,279 332,235 358,202 383,169 414,146 449,133 484,120 522,113 563,113 609,113 651,120 688,133 725,146 757,168 783,201 809,234 829,278 843,333 857,388 864,458 864,542 Z"
         id="glyph9246" /><glyph
         unicode="n"
         horiz-adv-x="900"
         d="M 825,0 L 825,686 C 825,739 821,783 814,818 806,853 793,882 776,904 759,925 736,941 708,950 679,959 644,963 602,963 559,963 521,956 487,941 452,926 423,904 399,876 374,847 355,812 342,771 329,729 322,681 322,627 L 322,0 142,0 142,851 C 142,874 142,898 142,923 141,948 141,971 140,994 139,1016 139,1035 138,1051 137,1067 137,1077 136,1082 L 306,1082 C 307,1079 307,1070 308,1055 309,1040 310,1024 311,1005 312,986 312,966 313,947 314,927 314,910 314,897 L 317,897 C 334,928 353,957 374,982 395,1007 419,1029 446,1047 473,1064 505,1078 540,1088 575,1097 616,1102 663,1102 723,1102 775,1095 818,1080 861,1065 897,1043 925,1012 953,981 974,942 987,894 1000,845 1006,788 1006,721 L 1006,0 825,0 Z"
         id="glyph9248" /><glyph
         unicode="m"
         horiz-adv-x="1456"
         d="M 768,0 L 768,686 C 768,739 765,783 758,818 751,853 740,882 725,904 709,925 688,941 663,950 638,959 607,963 570,963 532,963 498,956 467,941 436,926 410,904 389,876 367,847 350,812 339,771 327,729 321,681 321,627 L 321,0 142,0 142,851 C 142,874 142,898 142,923 141,948 141,971 140,994 139,1016 139,1035 138,1051 137,1067 137,1077 136,1082 L 306,1082 C 307,1079 307,1070 308,1055 309,1040 310,1024 311,1005 312,986 312,966 313,947 314,927 314,910 314,897 L 317,897 C 333,928 350,957 369,982 388,1007 410,1029 435,1047 460,1064 488,1078 521,1088 553,1097 590,1102 633,1102 715,1102 780,1086 828,1053 875,1020 908,968 927,897 L 930,897 C 946,928 964,957 984,982 1004,1007 1027,1029 1054,1047 1081,1064 1111,1078 1144,1088 1177,1097 1215,1102 1258,1102 1313,1102 1360,1095 1400,1080 1439,1065 1472,1043 1497,1012 1522,981 1541,942 1553,894 1565,845 1571,788 1571,721 L 1571,0 1393,0 1393,686 C 1393,739 1390,783 1383,818 1376,853 1365,882 1350,904 1334,925 1313,941 1288,950 1263,959 1232,963 1195,963 1157,963 1123,956 1092,942 1061,927 1035,906 1014,878 992,850 975,815 964,773 952,731 946,682 946,627 L 946,0 768,0 Z"
         id="glyph9250" /><glyph
         unicode="l"
         horiz-adv-x="187"
         d="M 138,0 L 138,1484 318,1484 318,0 138,0 Z"
         id="glyph9252" /><glyph
         unicode="k"
         horiz-adv-x="927"
         d="M 816,0 L 450,494 318,385 318,0 138,0 138,1484 318,1484 318,557 793,1082 1004,1082 565,617 1027,0 816,0 Z"
         id="glyph9254" /><glyph
         unicode="i"
         horiz-adv-x="187"
         d="M 137,1312 L 137,1484 317,1484 317,1312 137,1312 Z M 137,0 L 137,1082 317,1082 317,0 137,0 Z"
         id="glyph9256" /><glyph
         unicode="h"
         horiz-adv-x="874"
         d="M 317,897 C 337,934 359,965 382,991 405,1016 431,1037 459,1054 487,1071 518,1083 551,1091 584,1098 622,1102 663,1102 732,1102 789,1093 834,1074 878,1055 913,1029 939,996 964,962 982,922 992,875 1001,828 1006,777 1006,721 L 1006,0 825,0 825,686 C 825,732 822,772 817,807 811,842 800,871 784,894 768,917 745,934 716,946 687,957 649,963 602,963 559,963 521,955 487,940 452,925 423,903 399,875 374,847 355,813 342,773 329,733 322,688 322,638 L 322,0 142,0 142,1484 322,1484 322,1098 C 322,1076 322,1054 321,1032 320,1010 320,990 319,971 318,952 317,937 316,924 315,911 315,902 314,897 L 317,897 Z"
         id="glyph9258" /><glyph
         unicode="f"
         horiz-adv-x="557"
         d="M 361,951 L 361,0 181,0 181,951 29,951 29,1082 181,1082 181,1204 C 181,1243 185,1280 192,1314 199,1347 213,1377 233,1402 252,1427 279,1446 313,1461 347,1475 391,1482 445,1482 466,1482 489,1481 512,1479 535,1477 555,1474 572,1470 L 572,1333 C 561,1335 548,1337 533,1339 518,1340 504,1341 492,1341 465,1341 444,1337 427,1330 410,1323 396,1312 387,1299 377,1285 370,1268 367,1248 363,1228 361,1205 361,1179 L 361,1082 572,1082 572,951 361,951 Z"
         id="glyph9260" /><glyph
         unicode="e"
         horiz-adv-x="980"
         d="M 276,503 C 276,446 282,394 294,347 305,299 323,258 348,224 372,189 403,163 441,144 479,125 525,115 578,115 656,115 719,131 766,162 813,193 844,233 861,281 L 1019,236 C 1008,206 992,176 972,146 951,115 924,88 890,64 856,39 814,19 763,4 712,-12 650,-20 578,-20 418,-20 296,28 213,123 129,218 87,360 87,548 87,649 100,735 125,806 150,876 185,933 229,977 273,1021 324,1053 383,1073 442,1092 504,1102 571,1102 662,1102 738,1087 799,1058 860,1029 909,988 946,937 983,885 1009,824 1025,754 1040,684 1048,608 1048,527 L 1048,503 276,503 Z M 862,641 C 852,755 823,838 775,891 727,943 658,969 568,969 538,969 507,964 474,955 441,945 410,928 382,903 354,878 330,845 311,803 292,760 281,706 278,641 L 862,641 Z"
         id="glyph9262" /><glyph
         unicode="d"
         horiz-adv-x="954"
         d="M 821,174 C 788,105 744,55 689,25 634,-5 565,-20 484,-20 347,-20 247,26 183,118 118,210 86,349 86,536 86,913 219,1102 484,1102 566,1102 634,1087 689,1057 744,1027 788,979 821,914 L 823,914 C 823,921 823,931 823,946 822,960 822,975 822,991 821,1006 821,1021 821,1035 821,1049 821,1059 821,1065 L 821,1484 1001,1484 1001,223 C 1001,197 1001,172 1002,148 1002,124 1002,102 1003,82 1004,62 1004,45 1005,31 1006,16 1006,6 1007,0 L 835,0 C 834,7 833,16 832,29 831,41 830,55 829,71 828,87 827,104 826,122 825,139 825,157 825,174 L 821,174 Z M 275,542 C 275,467 280,403 289,350 298,297 313,253 334,219 355,184 381,159 413,143 445,127 484,119 530,119 577,119 619,127 656,142 692,157 722,182 747,217 771,251 789,296 802,351 815,406 821,474 821,554 821,631 815,696 802,749 789,802 771,844 746,877 721,910 691,933 656,948 620,962 579,969 532,969 488,969 450,961 418,946 386,931 359,906 338,872 317,838 301,794 291,740 280,685 275,619 275,542 Z"
         id="glyph9264" /><glyph
         unicode="c"
         horiz-adv-x="875"
         d="M 275,546 C 275,484 280,427 289,375 298,323 313,278 334,241 355,203 384,174 419,153 454,132 497,122 548,122 612,122 666,139 709,173 752,206 778,258 788,328 L 970,328 C 964,283 951,239 931,197 911,155 884,118 850,86 815,54 773,28 724,9 675,-10 618,-20 553,-20 468,-20 396,-6 337,23 278,52 230,91 193,142 156,192 129,251 112,320 95,388 87,462 87,542 87,615 93,679 105,735 117,790 134,839 156,881 177,922 203,957 232,986 261,1014 293,1037 328,1054 362,1071 398,1083 436,1091 474,1098 512,1102 551,1102 612,1102 666,1094 713,1077 760,1060 801,1038 836,1009 870,980 898,945 919,906 940,867 955,824 964,779 L 779,765 C 770,825 746,873 708,908 670,943 616,961 546,961 495,961 452,953 418,936 383,919 355,893 334,859 313,824 298,781 289,729 280,677 275,616 275,546 Z"
         id="glyph9266" /><glyph
         unicode="a"
         horiz-adv-x="1060"
         d="M 414,-20 C 305,-20 224,9 169,66 114,124 87,203 87,303 87,375 101,434 128,480 155,526 190,562 234,588 277,614 327,632 383,642 439,652 496,657 554,657 L 797,657 797,717 C 797,762 792,800 783,832 774,863 759,889 740,908 721,928 697,942 668,951 639,960 604,965 565,965 530,965 499,963 471,958 443,953 419,944 398,931 377,918 361,900 348,878 335,855 327,827 323,793 L 135,810 C 142,853 154,892 173,928 192,963 218,994 253,1020 287,1046 330,1066 382,1081 433,1095 496,1102 569,1102 705,1102 807,1071 876,1009 945,946 979,856 979,738 L 979,272 C 979,219 986,179 1000,152 1014,125 1041,111 1080,111 1090,111 1100,112 1110,113 1120,114 1130,116 1139,118 L 1139,6 C 1116,1 1094,-3 1072,-6 1049,-9 1025,-10 1000,-10 966,-10 937,-5 913,4 888,13 868,26 853,45 838,63 826,86 818,113 810,140 805,171 803,207 L 797,207 C 778,172 757,141 734,113 711,85 684,61 653,42 622,22 588,7 549,-4 510,-15 465,-20 414,-20 Z M 455,115 C 512,115 563,125 606,146 649,167 684,194 713,226 741,259 762,294 776,332 790,371 797,408 797,443 L 797,531 600,531 C 556,531 514,528 475,522 435,517 400,506 370,489 340,472 316,449 299,418 281,388 272,349 272,300 272,241 288,195 320,163 351,131 396,115 455,115 Z"
         id="glyph9268" /><glyph
         unicode="T"
         horiz-adv-x="1139"
         d="M 720,1253 L 720,0 530,0 530,1253 46,1253 46,1409 1204,1409 1204,1253 720,1253 Z"
         id="glyph9270" /><glyph
         unicode="S"
         horiz-adv-x="1139"
         d="M 1272,389 C 1272,330 1261,275 1238,225 1215,175 1179,132 1131,96 1083,59 1023,31 950,11 877,-10 790,-20 690,-20 515,-20 378,11 280,72 182,133 120,222 93,338 L 278,375 C 287,338 302,305 321,275 340,245 367,219 400,198 433,176 473,159 522,147 571,135 629,129 697,129 754,129 806,134 853,144 900,153 941,168 975,188 1009,208 1036,234 1055,266 1074,297 1083,335 1083,379 1083,425 1073,462 1052,491 1031,520 1001,543 963,562 925,581 880,596 827,609 774,622 716,635 652,650 613,659 573,668 534,679 494,689 456,701 420,716 383,730 349,747 317,766 285,785 257,809 234,836 211,863 192,894 179,930 166,965 159,1006 159,1053 159,1120 173,1177 200,1225 227,1272 264,1311 312,1342 360,1373 417,1395 482,1409 547,1423 618,1430 694,1430 781,1430 856,1423 918,1410 980,1396 1032,1375 1075,1348 1118,1321 1152,1287 1178,1247 1203,1206 1224,1159 1239,1106 L 1051,1073 C 1042,1107 1028,1137 1011,1164 993,1191 970,1213 941,1231 912,1249 878,1263 837,1272 796,1281 747,1286 692,1286 627,1286 572,1280 528,1269 483,1257 448,1241 421,1221 394,1201 374,1178 363,1151 351,1124 345,1094 345,1063 345,1021 356,987 377,960 398,933 426,910 462,892 498,874 540,859 587,847 634,835 685,823 738,811 781,801 825,791 868,781 911,770 952,758 991,744 1030,729 1067,712 1102,693 1136,674 1166,650 1191,622 1216,594 1236,561 1251,523 1265,485 1272,440 1272,389 Z"
         id="glyph9272" /><glyph
         unicode="O"
         horiz-adv-x="1377"
         d="M 1495,711 C 1495,601 1479,501 1448,411 1416,321 1370,244 1310,180 1250,116 1177,67 1090,32 1003,-3 905,-20 795,-20 679,-20 577,-2 490,35 403,71 330,122 272,187 214,252 170,329 141,418 112,507 97,605 97,711 97,821 112,920 143,1009 174,1098 219,1173 278,1236 337,1298 411,1346 498,1380 585,1413 684,1430 797,1430 909,1430 1009,1413 1096,1379 1183,1345 1256,1297 1315,1234 1374,1171 1418,1096 1449,1007 1480,918 1495,820 1495,711 Z M 1300,711 C 1300,796 1289,873 1268,942 1246,1011 1214,1071 1172,1120 1129,1169 1077,1207 1014,1234 951,1261 879,1274 797,1274 713,1274 639,1261 576,1234 513,1207 460,1169 418,1120 375,1071 344,1011 323,942 302,873 291,796 291,711 291,626 302,549 324,479 345,408 377,348 420,297 462,246 515,206 578,178 641,149 713,135 795,135 883,135 959,149 1023,178 1086,207 1139,247 1180,298 1221,349 1251,409 1271,480 1290,551 1300,628 1300,711 Z"
         id="glyph9274" /><glyph
         unicode="L"
         horiz-adv-x="900"
         d="M 168,0 L 168,1409 359,1409 359,156 1071,156 1071,0 168,0 Z"
         id="glyph9276" /><glyph
         unicode="F"
         horiz-adv-x="1006"
         d="M 359,1253 L 359,729 1145,729 1145,571 359,571 359,0 168,0 168,1409 1169,1409 1169,1253 359,1253 Z"
         id="glyph9278" /><glyph
         unicode="C"
         horiz-adv-x="1297"
         d="M 792,1274 C 712,1274 641,1261 580,1234 518,1207 466,1169 425,1120 383,1071 351,1011 330,942 309,873 298,796 298,711 298,626 310,549 333,479 356,408 389,348 432,297 475,246 527,207 590,179 652,151 722,137 800,137 855,137 905,144 950,159 995,173 1035,193 1072,219 1108,245 1140,276 1169,312 1198,347 1223,387 1245,430 L 1401,352 C 1376,299 1344,250 1307,205 1270,160 1226,120 1176,87 1125,54 1068,28 1005,9 941,-10 870,-20 791,-20 677,-20 577,-2 492,35 406,71 334,122 277,187 219,252 176,329 147,418 118,507 104,605 104,711 104,821 119,920 150,1009 180,1098 224,1173 283,1236 341,1298 413,1346 498,1380 583,1413 681,1430 790,1430 940,1430 1065,1401 1166,1342 1267,1283 1341,1196 1388,1081 L 1207,1021 C 1194,1054 1176,1086 1153,1117 1130,1147 1102,1174 1068,1197 1034,1220 994,1239 949,1253 903,1267 851,1274 792,1274 Z"
         id="glyph9280" /><glyph
         unicode=" "
         horiz-adv-x="556"
         id="glyph9282" /></font></defs><defs
     id="defs9284"><font
       id="EmbeddedFont_2"
       horiz-adv-x="2048"
       horiz-origin-x="0"
       horiz-origin-y="0"
       vert-origin-x="45"
       vert-origin-y="90"
       vert-adv-y="90"><font-face
         font-family="Liberation Serif embedded"
         units-per-em="2048"
         font-weight="normal"
         font-style="normal"
         ascent="1799"
         descent="423"
         id="font-face9287" /><missing-glyph
         horiz-adv-x="2048"
         d="M 0,0 L 2047,0 2047,2047 0,2047 0,0 Z"
         id="missing-glyph9289" /><glyph
         unicode="u"
         horiz-adv-x="980"
         d="M 313,268 C 313,213 326,170 351,141 376,111 416,96 473,96 510,96 549,99 589,104 629,109 668,116 705,127 L 705,870 563,895 563,940 870,940 870,70 989,45 989,0 715,0 707,76 C 688,65 665,54 638,43 611,32 584,21 555,12 526,3 496,-5 467,-11 438,-17 411,-20 387,-20 351,-20 318,-15 289,-5 260,5 235,21 214,43 193,65 176,94 165,129 153,164 147,206 147,256 L 147,870 27,895 27,940 313,940 313,268 Z"
         id="glyph9291" /><glyph
         unicode="t"
         horiz-adv-x="557"
         d="M 334,-20 C 270,-20 222,-1 191,37 159,75 143,128 143,197 L 143,856 20,856 20,901 145,940 246,1153 309,1153 309,940 524,940 524,856 309,856 309,215 C 309,172 319,139 339,117 358,95 384,84 416,84 441,84 465,86 490,89 514,92 536,96 557,100 L 557,35 C 547,28 534,22 518,15 501,8 483,3 464,-3 444,-7 423,-12 401,-15 379,-18 357,-20 334,-20 Z"
         id="glyph9293" /><glyph
         unicode="r"
         horiz-adv-x="636"
         d="M 664,965 L 664,711 621,711 563,821 C 544,821 524,820 503,817 482,814 460,811 439,807 418,802 397,797 378,791 358,785 341,779 326,772 L 326,70 487,45 487,0 41,0 41,45 160,70 160,870 41,895 41,940 315,940 324,823 C 339,836 360,850 387,867 414,883 443,898 474,913 505,928 536,940 567,950 598,960 625,965 649,965 L 664,965 Z"
         id="glyph9295" /><glyph
         unicode="o"
         horiz-adv-x="875"
         d="M 946,475 C 946,316 910,193 839,108 768,23 657,-20 506,-20 365,-20 258,22 186,107 114,192 78,314 78,475 78,634 114,755 186,839 258,923 367,965 514,965 657,965 764,924 837,842 910,759 946,637 946,475 Z M 766,475 C 766,540 762,598 753,649 744,700 730,743 710,778 689,813 662,839 629,858 596,876 555,885 506,885 457,885 416,876 384,858 352,839 327,813 308,778 289,743 276,700 269,649 262,598 258,540 258,475 258,410 262,351 269,300 276,249 289,205 308,170 327,134 352,107 384,88 416,69 457,59 506,59 555,59 596,69 629,88 662,107 689,134 710,170 730,205 744,249 753,300 762,351 766,410 766,475 Z"
         id="glyph9297" /><glyph
         unicode="n"
         horiz-adv-x="1007"
         d="M 324,864 C 343,875 365,886 391,898 416,910 443,921 471,931 499,941 527,949 555,956 583,962 609,965 633,965 669,965 702,960 732,950 762,940 788,924 810,902 831,880 848,851 861,816 873,781 879,738 879,688 L 879,70 993,45 993,0 588,0 588,45 713,70 713,670 C 713,725 700,769 673,801 646,832 604,848 547,848 528,848 509,847 488,845 467,843 447,841 427,838 407,835 388,832 371,829 353,825 338,822 326,819 L 326,70 453,45 453,0 47,0 47,45 160,70 160,870 47,895 47,940 315,940 324,864 Z"
         id="glyph9299" /><glyph
         unicode="m"
         horiz-adv-x="1483"
         d="M 326,864 C 345,875 367,886 393,898 418,910 445,921 472,931 499,941 527,949 555,956 583,962 609,965 633,965 679,965 722,956 761,939 800,922 829,894 848,856 869,868 895,881 925,894 955,907 986,918 1019,929 1051,940 1083,948 1115,955 1146,962 1175,965 1200,965 1236,965 1269,960 1298,950 1327,940 1353,924 1374,902 1395,880 1411,851 1423,816 1434,781 1440,738 1440,688 L 1440,70 1561,45 1561,0 1134,0 1134,45 1274,70 1274,670 C 1274,725 1262,768 1237,798 1212,827 1171,842 1114,842 1097,842 1077,841 1054,838 1031,835 1008,832 985,829 962,826 940,822 919,818 898,813 880,810 866,807 877,771 883,731 883,688 L 883,70 1024,45 1024,0 578,0 578,45 717,70 717,670 C 717,725 703,768 675,798 646,827 604,842 547,842 528,842 509,841 489,839 468,837 448,835 429,832 409,829 390,826 373,823 355,819 340,816 328,813 L 328,70 469,45 469,0 43,0 43,45 162,70 162,870 43,895 43,940 318,940 326,864 Z"
         id="glyph9301" /><glyph
         unicode="i"
         horiz-adv-x="530"
         d="M 379,1247 C 379,1232 376,1219 371,1206 365,1193 357,1181 347,1171 337,1161 325,1153 312,1148 299,1142 285,1139 270,1139 255,1139 242,1142 229,1148 216,1153 204,1161 194,1171 184,1181 176,1193 171,1206 165,1219 162,1232 162,1247 162,1262 165,1276 171,1289 176,1302 184,1314 194,1324 204,1334 216,1342 229,1348 242,1353 255,1356 270,1356 285,1356 299,1353 312,1348 325,1342 337,1334 347,1324 357,1314 365,1302 371,1289 376,1276 379,1262 379,1247 Z M 369,70 L 530,45 530,0 43,0 43,45 203,70 203,870 70,895 70,940 369,940 369,70 Z"
         id="glyph9303" /><glyph
         unicode="f"
         horiz-adv-x="636"
         d="M 225,856 L 63,856 63,905 225,944 225,1010 C 225,1081 232,1143 247,1197 261,1250 282,1295 309,1332 336,1368 369,1395 408,1414 447,1433 490,1442 539,1442 569,1442 596,1440 619,1437 642,1433 663,1428 682,1423 L 682,1218 633,1218 588,1341 C 577,1348 566,1353 553,1357 540,1360 525,1362 506,1362 483,1362 464,1357 449,1347 434,1336 423,1320 414,1299 405,1277 399,1249 396,1216 393,1183 391,1143 391,1096 L 391,940 641,940 641,856 391,856 391,78 594,45 594,0 86,0 86,45 225,78 225,856 Z"
         id="glyph9305" /><glyph
         unicode="e"
         horiz-adv-x="742"
         d="M 260,473 L 260,455 C 260,406 264,360 271,315 278,270 292,231 313,197 334,162 363,135 401,115 439,94 489,84 551,84 571,84 592,85 614,87 636,88 658,90 680,93 702,96 723,99 744,102 765,105 784,109 801,113 L 801,57 C 786,47 767,38 746,29 724,20 700,11 674,4 648,-3 620,-9 591,-14 562,-18 532,-20 502,-20 424,-20 358,-9 305,12 251,33 207,65 174,107 141,149 117,201 102,263 87,325 80,396 80,477 80,641 114,763 183,844 252,925 350,965 477,965 527,965 574,958 618,945 661,932 699,909 732,878 765,847 791,805 810,752 829,699 838,634 838,555 L 838,473 260,473 Z M 477,885 C 440,885 408,877 381,862 354,846 331,824 314,795 296,766 283,732 275,691 266,650 262,604 262,553 L 664,553 C 664,604 661,650 656,691 650,732 640,766 626,795 611,824 592,846 568,862 544,877 514,885 477,885 Z"
         id="glyph9307" /><glyph
         unicode="d"
         horiz-adv-x="954"
         d="M 723,70 C 694,47 657,26 614,8 570,-11 518,-20 459,-20 202,-20 74,140 74,461 74,539 83,609 100,672 117,734 143,787 178,831 213,874 258,908 312,931 366,954 430,965 504,965 538,965 574,963 613,959 651,955 688,949 723,942 722,949 721,960 720,975 719,989 719,1004 719,1021 718,1037 718,1053 718,1069 717,1085 717,1098 717,1108 L 717,1352 559,1376 559,1421 883,1421 883,70 999,45 999,0 735,0 723,70 Z M 254,461 C 254,391 260,332 273,284 285,236 302,197 325,168 348,138 375,117 407,104 439,91 475,84 514,84 554,84 592,88 627,96 662,103 692,112 717,123 L 717,866 C 689,871 657,876 620,879 583,882 548,883 514,883 425,883 360,847 318,776 275,705 254,600 254,461 Z"
         id="glyph9309" /><glyph
         unicode="b"
         horiz-adv-x="980"
         d="M 766,496 C 766,564 760,621 748,668 735,714 718,751 695,780 672,809 644,829 612,842 579,854 543,860 504,860 488,860 471,859 453,858 434,857 416,855 398,852 380,849 363,845 346,841 329,837 315,832 303,827 L 303,82 C 331,77 363,73 399,70 435,67 470,66 504,66 596,66 663,102 704,174 745,246 766,353 766,496 Z M 137,1352 L 0,1376 0,1421 303,1421 303,1085 C 303,1072 303,1058 303,1042 302,1025 302,1008 302,991 301,973 301,955 300,938 299,920 298,903 297,887 327,910 364,929 407,944 450,958 497,965 549,965 677,965 775,926 844,849 912,771 946,653 946,496 946,417 937,345 920,282 903,218 876,164 840,119 804,74 759,40 704,16 649,-8 583,-20 508,-20 476,-20 444,-18 411,-15 378,-11 345,-6 313,0 281,6 250,13 220,22 190,30 162,39 137,49 L 137,1352 Z"
         id="glyph9311" /><glyph
         unicode="a"
         horiz-adv-x="822"
         d="M 465,961 C 508,961 547,957 584,949 621,941 652,927 679,908 706,889 727,863 742,830 757,797 764,755 764,705 L 764,70 881,45 881,0 623,0 604,94 C 594,84 581,72 564,59 547,46 526,33 502,22 478,10 450,0 419,-8 387,-16 352,-20 313,-20 268,-20 230,-13 199,1 168,15 143,35 124,60 105,85 92,115 84,149 76,184 72,221 72,261 72,302 77,338 87,369 97,399 111,425 129,446 147,466 168,483 193,496 217,509 243,520 272,527 300,534 330,539 362,542 393,545 425,546 457,546 L 598,546 598,694 C 598,723 596,748 591,771 586,795 579,815 568,832 557,848 542,861 523,871 504,880 481,885 453,885 421,885 389,881 356,872 323,863 295,852 270,838 L 236,721 180,721 180,926 C 223,935 268,944 315,951 361,958 411,961 465,961 Z M 598,476 L 467,476 C 428,476 394,473 365,466 336,460 313,449 294,434 275,418 261,397 252,370 243,343 238,309 238,267 238,149 286,90 381,90 426,90 466,95 499,106 532,116 565,129 598,145 L 598,476 Z"
         id="glyph9313" /><glyph
         unicode="&gt;"
         horiz-adv-x="927"
         d="M 104,186 L 104,289 913,680 104,1071 104,1174 1057,705 1057,655 104,186 Z"
         id="glyph9315" /><glyph
         unicode="&lt;"
         horiz-adv-x="927"
         d="M 102,655 L 102,705 1055,1174 1055,1071 246,680 1055,289 1055,186 102,655 Z"
         id="glyph9317" /><glyph
         unicode="/"
         horiz-adv-x="557"
         d="M 100,-20 L 0,-20 471,1350 569,1350 100,-20 Z"
         id="glyph9319" /></font></defs><defs
     id="defs9321"><font
       id="EmbeddedFont_3"
       horiz-adv-x="2048"
       horiz-origin-x="0"
       horiz-origin-y="0"
       vert-origin-x="45"
       vert-origin-y="90"
       vert-adv-y="90"><font-face
         font-family="Noto Sans embedded"
         units-per-em="2048"
         font-weight="bold"
         font-style="normal"
         ascent="2170"
         descent="582"
         id="font-face9324" /><missing-glyph
         horiz-adv-x="2048"
         d="M 0,0 L 2047,0 2047,2047 0,2047 0,0 Z"
         id="missing-glyph9326" /><glyph
         unicode="y"
         horiz-adv-x="1165"
         d="M 0,1118 L 334,1118 545,489 C 563,434 575,370 582,295 L 588,295 C 595,364 610,428 631,489 L 838,1118 1165,1118 692,-143 C 649,-260 587,-347 507,-405 426,-463 332,-492 225,-492 172,-492 121,-486 70,-475 L 70,-233 C 107,-242 147,-246 190,-246 244,-246 291,-229 332,-197 372,-163 403,-114 426,-47 L 444,8 0,1118 Z"
         id="glyph9328" /><glyph
         unicode="u"
         horiz-adv-x="1060"
         d="M 952,0 L 911,143 895,143 C 862,91 816,51 756,23 696,-6 628,-20 551,-20 420,-20 321,15 254,86 187,156 154,257 154,389 L 154,1118 459,1118 459,465 C 459,384 473,324 502,284 531,243 576,223 639,223 724,223 786,252 824,309 862,366 881,460 881,592 L 881,1118 1186,1118 1186,0 952,0 Z"
         id="glyph9330" /><glyph
         unicode="t"
         horiz-adv-x="795"
         d="M 631,223 C 684,223 748,235 823,258 L 823,31 C 747,-3 654,-20 543,-20 421,-20 332,11 277,73 221,134 193,227 193,350 L 193,889 47,889 47,1018 215,1120 303,1356 498,1356 498,1118 811,1118 811,889 498,889 498,350 C 498,307 510,275 535,254 559,233 591,223 631,223 Z"
         id="glyph9332" /><glyph
         unicode="s"
         horiz-adv-x="875"
         d="M 940,332 C 940,217 900,130 821,70 741,10 622,-20 463,-20 382,-20 312,-14 255,-4 198,8 144,24 94,45 L 94,297 C 151,270 215,248 286,230 357,212 419,203 473,203 584,203 639,235 639,299 639,323 632,343 617,358 602,373 577,390 541,409 505,428 457,450 397,475 311,511 248,544 208,575 167,606 138,641 120,681 101,720 92,769 92,827 92,926 131,1003 208,1058 285,1112 394,1139 535,1139 670,1139 801,1110 928,1051 L 836,831 C 780,855 728,875 679,890 630,905 581,913 530,913 440,913 395,889 395,840 395,813 410,789 439,769 468,749 531,719 629,680 716,645 780,612 821,581 862,550 892,515 911,475 930,435 940,387 940,332 Z"
         id="glyph9334" /><glyph
         unicode="r"
         horiz-adv-x="742"
         d="M 784,1139 C 825,1139 860,1136 887,1130 L 864,844 C 839,851 809,854 774,854 677,854 601,829 547,779 492,729 465,659 465,569 L 465,0 160,0 160,1118 391,1118 436,930 451,930 C 486,993 533,1043 592,1082 651,1120 715,1139 784,1139 Z"
         id="glyph9336" /><glyph
         unicode="q"
         horiz-adv-x="1060"
         d="M 623,219 C 700,219 757,241 793,286 829,330 849,407 852,518 L 852,555 C 852,675 834,761 797,813 760,865 700,891 618,891 475,891 403,778 403,553 403,441 421,357 457,302 492,247 548,219 623,219 Z M 514,-20 C 382,-20 279,31 204,133 129,234 92,376 92,557 92,740 130,882 207,985 283,1088 387,1139 520,1139 591,1139 652,1126 705,1099 758,1072 804,1031 844,975 L 852,975 879,1118 1137,1118 1137,-492 831,-492 831,-23 C 831,18 835,74 844,145 L 831,145 C 798,91 755,50 701,22 647,-6 585,-20 514,-20 Z"
         id="glyph9338" /><glyph
         unicode="p"
         horiz-adv-x="1059"
         d="M 774,-20 C 643,-20 540,28 465,123 L 449,123 C 460,30 465,-24 465,-39 L 465,-492 160,-492 160,1118 408,1118 451,973 465,973 C 536,1084 642,1139 782,1139 914,1139 1017,1088 1092,986 1167,884 1204,742 1204,561 1204,442 1187,338 1152,250 1117,162 1067,95 1002,49 937,3 861,-20 774,-20 Z M 684,895 C 609,895 554,872 519,826 484,779 466,703 465,596 L 465,563 C 465,443 483,357 519,305 554,253 611,227 688,227 825,227 893,340 893,565 893,675 876,758 843,813 809,868 756,895 684,895 Z"
         id="glyph9340" /><glyph
         unicode="o"
         horiz-adv-x="1113"
         d="M 403,561 C 403,450 421,367 458,310 494,253 553,225 635,225 716,225 775,253 811,310 846,366 864,450 864,561 864,672 846,755 810,810 774,865 715,893 633,893 552,893 493,866 457,811 421,756 403,672 403,561 Z M 1176,561 C 1176,379 1128,237 1032,134 936,31 802,-20 631,-20 524,-20 429,4 347,51 265,98 202,165 158,253 114,341 92,444 92,561 92,744 140,886 235,987 330,1088 464,1139 637,1139 744,1139 839,1116 921,1069 1003,1022 1066,955 1110,868 1154,781 1176,678 1176,561 Z"
         id="glyph9342" /><glyph
         unicode="n"
         horiz-adv-x="1059"
         d="M 1192,0 L 887,0 887,653 C 887,734 873,794 844,835 815,875 770,895 707,895 622,895 560,867 522,810 484,753 465,658 465,526 L 465,0 160,0 160,1118 393,1118 434,975 451,975 C 485,1029 532,1070 592,1098 651,1125 719,1139 795,1139 925,1139 1024,1104 1091,1034 1158,963 1192,862 1192,729 L 1192,0 Z"
         id="glyph9344" /><glyph
         unicode="h"
         horiz-adv-x="1059"
         d="M 1192,0 L 887,0 887,653 C 887,814 827,895 707,895 622,895 560,866 522,808 484,750 465,656 465,526 L 465,0 160,0 160,1556 465,1556 465,1239 C 465,1214 463,1156 458,1065 L 451,975 467,975 C 535,1084 643,1139 791,1139 922,1139 1022,1104 1090,1033 1158,962 1192,861 1192,729 L 1192,0 Z"
         id="glyph9346" /><glyph
         unicode="e"
         horiz-adv-x="1060"
         d="M 623,922 C 558,922 508,902 471,861 434,820 413,761 408,686 L 836,686 C 835,761 815,820 777,861 739,902 688,922 623,922 Z M 666,-20 C 486,-20 345,30 244,129 143,228 92,369 92,551 92,738 139,883 233,986 326,1088 456,1139 621,1139 779,1139 902,1094 990,1004 1078,914 1122,790 1122,631 L 1122,483 401,483 C 404,396 430,329 478,280 526,231 593,207 680,207 747,207 811,214 871,228 931,242 994,264 1059,295 L 1059,59 C 1006,32 949,13 888,-1 827,-13 753,-20 666,-20 Z"
         id="glyph9348" /><glyph
         unicode="c"
         horiz-adv-x="927"
         d="M 614,-20 C 266,-20 92,171 92,553 92,743 139,888 234,989 329,1089 464,1139 641,1139 770,1139 886,1114 989,1063 L 899,827 C 851,846 806,862 765,875 724,887 682,893 641,893 482,893 403,780 403,555 403,336 482,227 641,227 700,227 754,235 804,251 854,266 904,291 954,324 L 954,63 C 905,32 855,10 805,-2 754,-14 691,-20 614,-20 Z"
         id="glyph9350" /><glyph
         unicode="a"
         horiz-adv-x="1033"
         d="M 870,0 L 811,152 803,152 C 752,87 699,43 645,18 590,-7 519,-20 432,-20 325,-20 240,11 179,73 117,135 86,223 86,338 86,457 128,546 211,603 294,660 419,688 586,688 L 780,688 780,739 C 780,856 722,915 606,915 517,915 412,888 291,834 L 190,1040 C 319,1107 461,1141 618,1141 768,1141 883,1108 963,1043 1043,978 1083,878 1083,745 L 1083,0 870,0 Z M 780,514 L 662,514 C 573,514 507,499 464,469 421,440 399,394 399,334 399,247 448,203 547,203 618,203 674,223 717,263 759,303 780,357 780,423 L 780,514 Z"
         id="glyph9352" /><glyph
         unicode="T"
         horiz-adv-x="1139"
         d="M 748,0 L 438,0 438,1204 41,1204 41,1462 1145,1462 1145,1204 748,1204 748,0 Z"
         id="glyph9354" /><glyph
         unicode="S"
         horiz-adv-x="980"
         d="M 1047,406 C 1047,274 1000,170 905,94 810,18 677,-20 508,-20 352,-20 214,9 94,68 L 94,356 C 193,312 276,281 345,263 413,245 475,236 532,236 600,236 652,249 689,275 725,301 743,340 743,391 743,420 735,445 719,468 703,490 680,511 649,532 618,553 554,586 459,631 370,673 303,713 258,752 213,791 178,836 151,887 124,938 111,998 111,1067 111,1196 155,1298 243,1372 330,1446 451,1483 606,1483 682,1483 755,1474 824,1456 893,1438 965,1413 1040,1380 L 940,1139 C 862,1171 798,1193 747,1206 696,1219 645,1225 596,1225 537,1225 492,1211 461,1184 430,1157 414,1121 414,1077 414,1050 420,1026 433,1006 446,985 466,966 494,947 521,928 587,893 690,844 827,779 920,713 971,648 1022,582 1047,501 1047,406 Z"
         id="glyph9356" /><glyph
         unicode="P"
         horiz-adv-x="1033"
         d="M 494,774 L 596,774 C 691,774 763,793 810,831 857,868 881,923 881,995 881,1068 861,1121 822,1156 782,1191 720,1208 635,1208 L 494,1208 494,774 Z M 1194,1006 C 1194,849 1145,728 1047,645 948,562 808,520 627,520 L 494,520 494,0 184,0 184,1462 651,1462 C 828,1462 963,1424 1056,1348 1148,1271 1194,1157 1194,1006 Z"
         id="glyph9358" /><glyph
         unicode="N"
         horiz-adv-x="1324"
         d="M 1481,0 L 1087,0 451,1106 442,1106 C 455,911 461,771 461,688 L 461,0 184,0 184,1462 575,1462 1210,367 1217,367 C 1207,557 1202,691 1202,770 L 1202,1462 1481,1462 1481,0 Z"
         id="glyph9360" /><glyph
         unicode="G"
         horiz-adv-x="1218"
         d="M 739,821 L 1319,821 1319,63 C 1225,32 1137,11 1054,-2 971,-14 886,-20 799,-20 578,-20 410,45 294,175 177,304 119,490 119,733 119,969 187,1153 322,1285 457,1417 644,1483 883,1483 1033,1483 1178,1453 1317,1393 L 1214,1145 C 1107,1198 996,1225 881,1225 747,1225 640,1180 559,1090 478,1000 438,879 438,727 438,568 471,447 536,364 601,280 695,238 819,238 884,238 949,245 1016,258 L 1016,563 739,563 739,821 Z"
         id="glyph9362" /><glyph
         unicode="F"
         horiz-adv-x="874"
         d="M 489,0 L 184,0 184,1462 1022,1462 1022,1208 489,1208 489,831 985,831 985,578 489,578 489,0 Z"
         id="glyph9364" /><glyph
         unicode="-"
         horiz-adv-x="557"
         d="M 61,424 L 61,674 598,674 598,424 61,424 Z"
         id="glyph9366" /><glyph
         unicode=" "
         horiz-adv-x="529"
         id="glyph9368" /></font></defs><defs
     id="defs9370"><font
       id="EmbeddedFont_4"
       horiz-adv-x="2048"
       horiz-origin-x="0"
       horiz-origin-y="0"
       vert-origin-x="45"
       vert-origin-y="90"
       vert-adv-y="90"><font-face
         font-family="StarSymbol embedded"
         units-per-em="2048"
         font-weight="normal"
         font-style="normal"
         ascent="1402"
         descent="423"
         id="font-face9373" /><missing-glyph
         horiz-adv-x="2048"
         d="M 0,0 L 2047,0 2047,2047 0,2047 0,0 Z"
         id="missing-glyph9375" /><glyph
         unicode="●"
         horiz-adv-x="1191"
         d="M 813,0 C 632,0 489,54 383,161 276,268 223,411 223,592 223,773 276,916 383,1023 489,1130 632,1184 813,1184 992,1184 1136,1130 1245,1023 1353,916 1407,772 1407,592 1407,412 1353,268 1245,161 1136,54 992,0 813,0 Z"
         id="glyph9377" /><glyph
         unicode="–"
         horiz-adv-x="1165"
         d="M -4,459 L 1135,459 1135,606 -4,606 -4,459 Z"
         id="glyph9379" /></font></defs><defs
     class="TextShapeIndex"
     id="defs9381" /><defs
     class="EmbeddedBulletChars"
     id="defs9383"><g
       id="bullet-char-template(57356)"
       transform="scale(4.8828125e-4,-4.8828125e-4)"><path
         d="M 580,1141 1163,571 580,0 -4,571 580,1141 Z"
         id="path9386"
         inkscape:connector-curvature="0" /></g><g
       id="bullet-char-template(57354)"
       transform="scale(4.8828125e-4,-4.8828125e-4)"><path
         d="m 8,1128 1129,0 L 1137,0 8,0 8,1128 Z"
         id="path9389"
         inkscape:connector-curvature="0" /></g><g
       id="bullet-char-template(10146)"
       transform="scale(4.8828125e-4,-4.8828125e-4)"><path
         d="M 174,0 602,739 174,1481 1456,739 174,0 Z m 1184,739 -1049,607 350,-607 699,0 z"
         id="path9392"
         inkscape:connector-curvature="0" /></g><g
       id="bullet-char-template(10132)"
       transform="scale(4.8828125e-4,-4.8828125e-4)"><path
         d="M 2015,739 1276,0 717,0 l 543,543 -1086,0 0,393 1086,0 -543,545 557,0 741,-742 z"
         id="path9395"
         inkscape:connector-curvature="0" /></g><g
       id="bullet-char-template(10007)"
       transform="scale(4.8828125e-4,-4.8828125e-4)"><path
         d="m 0,-2 c -7,16 -16,29 -25,39 l 381,530 c -94,256 -141,385 -141,387 0,25 13,38 40,38 9,0 21,-2 34,-5 21,4 42,12 65,25 l 27,-13 111,-251 280,301 64,-25 24,25 c 21,-10 41,-24 62,-43 C 886,937 835,863 770,784 769,783 710,716 594,584 L 774,223 c 0,-27 -21,-55 -63,-84 l 16,-20 C 717,90 699,76 672,76 641,76 570,178 457,381 L 164,-76 c -22,-34 -53,-51 -92,-51 -42,0 -63,17 -64,51 -7,9 -10,24 -10,44 0,9 1,19 2,30 z"
         id="path9398"
         inkscape:connector-curvature="0" /></g><g
       id="bullet-char-template(10004)"
       transform="scale(4.8828125e-4,-4.8828125e-4)"><path
         d="M 285,-33 C 182,-33 111,30 74,156 52,228 41,333 41,471 c 0,78 14,145 41,201 34,71 87,106 158,106 53,0 88,-31 106,-94 l 23,-176 c 8,-64 28,-97 59,-98 l 735,706 c 11,11 33,17 66,17 42,0 63,-15 63,-46 l 0,-122 c 0,-36 -10,-64 -30,-84 L 442,47 C 390,-6 338,-33 285,-33 Z"
         id="path9401"
         inkscape:connector-curvature="0" /></g><g
       id="bullet-char-template(9679)"
       transform="scale(4.8828125e-4,-4.8828125e-4)"><path
         d="M 813,0 C 632,0 489,54 383,161 276,268 223,411 223,592 c 0,181 53,324 160,431 106,107 249,161 430,161 179,0 323,-54 432,-161 108,-107 162,-251 162,-431 0,-180 -54,-324 -162,-431 C 1136,54 992,0 813,0 Z"
         id="path9404"
         inkscape:connector-curvature="0" /></g><g
       id="bullet-char-template(8226)"
       transform="scale(4.8828125e-4,-4.8828125e-4)"><path
         d="m 346,457 c -73,0 -137,26 -191,78 -54,51 -81,114 -81,188 0,73 27,136 81,188 54,52 118,78 191,78 73,0 134,-26 185,-79 51,-51 77,-114 77,-187 0,-75 -25,-137 -76,-188 -50,-52 -112,-78 -186,-78 z"
         id="path9407"
         inkscape:connector-curvature="0" /></g><g
       id="bullet-char-template(8211)"
       transform="scale(4.8828125e-4,-4.8828125e-4)"><path
         d="m -4,459 1139,0 0,147 -1139,0 0,-147 z"
         id="path9410"
         inkscape:connector-curvature="0" /></g><g
       id="bullet-char-template(61548)"
       transform="scale(4.8828125e-4,-4.8828125e-4)"><path
         d="m 173,740 c 0,163 58,303 173,419 116,115 255,173 419,173 163,0 302,-58 418,-173 116,-116 174,-256 174,-419 0,-163 -58,-303 -174,-418 C 1067,206 928,148 765,148 601,148 462,206 346,322 231,437 173,577 173,740 Z"
         id="path9413"
         inkscape:connector-curvature="0" /></g></defs><defs
     class="TextEmbeddedBitmaps"
     id="defs9415" /><defs
     id="defs9417"><g
       id="dummy-master-page"
       ooo:name="dummy-master-page"
       class="Master_Slide"><g
         id="bg-dummy-master-page"
         class="Background"
         visibility="hidden"
         style="visibility:hidden" /><g
         id="bo-dummy-master-page"
         class="BackgroundObjects"
         visibility="hidden"
         style="visibility:hidden" /></g><g
       id="id2"
       ooo:name="Default"
       class="Master_Slide"><g
         id="bg-id2"
         class="Background" /><g
         id="bo-id2"
         class="BackgroundObjects"><g
           visibility="hidden"
           ooo:text-adjust="left"
           class="Date/Time"
           id="g9425"
           style="visibility:hidden"><g
             id="id3"><rect
               class="BoundingBox"
               x="1400"
               y="19131"
               width="6524"
               height="1449"
               id="rect9428"
               style="fill:none;stroke:none" /><text
               class="TextShape"
               id="text9430"><tspan
                 class="TextParagraph"
                 font-size="493px"
                 font-weight="400"
                 id="tspan9432"
                 style="font-weight:400;font-size:493px;font-family:'Liberation Serif', serif"><tspan
                   class="TextPosition"
                   x="1400"
                   y="19567"
                   id="tspan9434"><tspan
                     class="PlaceholderText"
                     id="tspan9436"
                     style="fill:#000000;stroke:none">&lt;date/time&gt;</tspan></tspan></tspan></text>
</g></g><g
           visibility="hidden"
           ooo:text-adjust="center"
           class="Footer"
           id="g9438"
           style="visibility:hidden"><g
             id="id4"><rect
               class="BoundingBox"
               x="9576"
               y="19131"
               width="8876"
               height="1449"
               id="rect9441"
               style="fill:none;stroke:none" /><text
               class="TextShape"
               id="text9443"><tspan
                 class="TextParagraph"
                 font-size="493px"
                 font-weight="400"
                 id="tspan9445"
                 style="font-weight:400;font-size:493px;font-family:'Liberation Serif', serif"><tspan
                   class="TextPosition"
                   x="13152"
                   y="19567"
                   id="tspan9447"><tspan
                     class="PlaceholderText"
                     id="tspan9449"
                     style="fill:#000000;stroke:none">&lt;footer&gt;</tspan></tspan></tspan></text>
</g></g><g
           visibility="hidden"
           ooo:text-adjust="right"
           class="Slide_Number"
           id="g9451"
           style="visibility:hidden"><g
             id="id5"><rect
               class="BoundingBox"
               x="20076"
               y="19131"
               width="6524"
               height="1449"
               id="rect9454"
               style="fill:none;stroke:none" /><text
               class="TextShape"
               id="text9456"><tspan
                 class="TextParagraph"
                 font-size="493px"
                 font-weight="400"
                 id="tspan9458"
                 style="font-weight:400;font-size:493px;font-family:'Liberation Serif', serif"><tspan
                   class="TextPosition"
                   x="24551"
                   y="19567"
                   id="tspan9460"><tspan
                     class="PlaceholderText"
                     id="tspan9462"
                     style="fill:#000000;stroke:none">&lt;number&gt;</tspan></tspan></tspan></text>
</g></g></g></g></defs><g
     class="DummySlide"
     id="g9464"
     transform="translate(0,-20235)"><g
       id="g9466"><g
         id="dummy-slide"
         class="Slide"
         clip-path="url(#presentation_clip_path)"><g
           ooo:name="dummy-page"
           class="Page"
           id="g9469" /></g></g></g><g
     class="SlideGroup"
     id="g9471"
     transform="matrix(0.02108345,0,0,0.02108345,-146.95167,458.65742)"
     inkscape:export-xdpi="300"
     inkscape:export-ydpi="300"><g
       visibility="hidden"
       id="g9473"
       style="visibility:hidden"><g
         id="container-id1"><g
           id="id1"
           class="Slide"
           clip-path="url(#presentation_clip_path)"><g
             ooo:name="page1"
             class="Page"
             id="g9477"><g
               class="com.sun.star.drawing.TableShape"
               id="g9479"><g
                 id="g9481"><rect
                   class="BoundingBox"
                   x="6970"
                   y="6510"
                   width="14120"
                   height="8020"
                   id="rect9483"
                   style="fill:none;stroke:none" /><path
                   d="m 6980,6520 4699,0 0,1999 -4699,0 0,-1999 z"
                   id="path9485"
                   inkscape:connector-curvature="0"
                   style="fill:#cccccc;stroke:none" /><text
                   class="TextShape"
                   id="text9487"><tspan
                     class="TextParagraph"
                     font-size="635px"
                     font-weight="700"
                     id="tspan9489"
                     style="font-weight:700;font-size:635px;font-family:'Noto Sans', sans-serif"><tspan
                       class="TextPosition"
                       x="7619"
                       y="7767"
                       id="tspan9491"><tspan
                         id="tspan9493"
                         style="fill:#000000;stroke:none">Phenotype</tspan></tspan></tspan></text>
<path
                   d="m 11679,6520 4699,0 0,1999 -4699,0 0,-1999 z"
                   id="path9495"
                   inkscape:connector-curvature="0"
                   style="fill:#cccccc;stroke:none" /><text
                   class="TextShape"
                   id="text9497"><tspan
                     class="TextParagraph"
                     font-size="635px"
                     font-weight="700"
                     id="tspan9499"
                     style="font-weight:700;font-size:635px;font-family:'Noto Sans', sans-serif"><tspan
                       class="TextPosition"
                       x="12496"
                       y="7767"
                       id="tspan9501"><tspan
                         id="tspan9503"
                         style="fill:#000000;stroke:none">Genotype</tspan></tspan></tspan></text>
<path
                   d="m 16378,6520 4701,0 0,1999 -4701,0 0,-1999 z"
                   id="path9505"
                   inkscape:connector-curvature="0"
                   style="fill:#cccccc;stroke:none" /><text
                   class="TextShape"
                   id="text9507"><tspan
                     class="TextParagraph"
                     font-size="635px"
                     font-weight="700"
                     id="tspan9509"
                     style="font-weight:700;font-size:635px;font-family:'Noto Sans', sans-serif"><tspan
                       class="TextPosition"
                       x="17196"
                       y="7338"
                       id="tspan9511"><tspan
                         id="tspan9513"
                         style="fill:#000000;stroke:none">Genotype </tspan></tspan><tspan
                       class="TextPosition"
                       x="17074"
                       y="8197"
                       id="tspan9515"><tspan
                         id="tspan9517"
                         style="fill:#000000;stroke:none">Frequency</tspan></tspan></tspan></text>
<path
                   d="m 6980,8519 4699,0 0,1999 -4699,0 0,-1999 z"
                   id="path9519"
                   inkscape:connector-curvature="0"
                   style="fill:#ffffff;stroke:none" /><text
                   class="TextShape"
                   id="text9521"><tspan
                     class="TextParagraph"
                     font-size="635px"
                     font-weight="700"
                     id="tspan9523"
                     style="font-weight:700;font-size:635px;font-family:'Noto Sans', sans-serif"><tspan
                       class="TextPosition"
                       x="7336"
                       y="10206"
                       id="tspan9525"><tspan
                         id="tspan9527"
                         style="fill:#000000;stroke:none">Super Taster</tspan></tspan></tspan></text>
<path
                   d="m 11679,8519 4699,0 0,1999 -4699,0 0,-1999 z"
                   id="path9529"
                   inkscape:connector-curvature="0"
                   style="fill:#ffffff;stroke:none" /><path
                   d="m 16378,8519 4701,0 0,1999 -4701,0 0,-1999 z"
                   id="path9531"
                   inkscape:connector-curvature="0"
                   style="fill:#ffffff;stroke:none" /><path
                   d="m 6980,10518 4699,0 0,1999 -4699,0 0,-1999 z"
                   id="path9533"
                   inkscape:connector-curvature="0"
                   style="fill:#ffffff;stroke:none" /><text
                   class="TextShape"
                   id="text9535"><tspan
                     class="TextParagraph"
                     font-size="635px"
                     font-weight="700"
                     id="tspan9537"
                     style="font-weight:700;font-size:635px;font-family:'Noto Sans', sans-serif"><tspan
                       class="TextPosition"
                       x="8337"
                       y="12205"
                       id="tspan9539"><tspan
                         id="tspan9541"
                         style="fill:#000000;stroke:none">Taster</tspan></tspan></tspan></text>
<path
                   d="m 11679,10518 4699,0 0,1999 -4699,0 0,-1999 z"
                   id="path9543"
                   inkscape:connector-curvature="0"
                   style="fill:#ffffff;stroke:none" /><path
                   d="m 16378,10518 4701,0 0,1999 -4701,0 0,-1999 z"
                   id="path9545"
                   inkscape:connector-curvature="0"
                   style="fill:#ffffff;stroke:none" /><path
                   d="m 6980,12517 4699,0 0,2002 -4699,0 0,-2002 z"
                   id="path9547"
                   inkscape:connector-curvature="0"
                   style="fill:#ffffff;stroke:none" /><text
                   class="TextShape"
                   id="text9549"><tspan
                     class="TextParagraph"
                     font-size="635px"
                     font-weight="700"
                     id="tspan9551"
                     style="font-weight:700;font-size:635px;font-family:'Noto Sans', sans-serif"><tspan
                       class="TextPosition"
                       x="7605"
                       y="14207"
                       id="tspan9553"><tspan
                         id="tspan9555"
                         style="fill:#000000;stroke:none">Non-taster</tspan></tspan></tspan></text>
<path
                   d="m 11679,12517 4699,0 0,2002 -4699,0 0,-2002 z"
                   id="path9557"
                   inkscape:connector-curvature="0"
                   style="fill:#ffffff;stroke:none" /><path
                   d="m 16378,12517 4701,0 0,2002 -4701,0 0,-2002 z"
                   id="path9559"
                   inkscape:connector-curvature="0"
                   style="fill:#ffffff;stroke:none" /><path
                   d="m 6980,8519 -9,9 0,-2017 9,9 9,9 0,1981 -9,9 z"
                   id="path9561"
                   inkscape:connector-curvature="0"
                   style="fill:#000000;stroke:none" /><path
                   d="m 11679,8519 -9,-9 0,-1981 9,-9 9,9 0,1981 -9,9 z"
                   id="path9563"
                   inkscape:connector-curvature="0"
                   style="fill:#000000;stroke:none" /><path
                   d="m 11679,6520 -9,9 -4681,0 -9,-9 -9,-9 4717,0 -9,9 z"
                   id="path9565"
                   inkscape:connector-curvature="0"
                   style="fill:#000000;stroke:none" /><path
                   d="m 11679,8519 -9,-9 0,-1981 9,-9 9,9 0,1981 -9,9 z"
                   id="path9567"
                   inkscape:connector-curvature="0"
                   style="fill:#000000;stroke:none" /><path
                   d="m 16378,8519 -9,-9 0,-1981 9,-9 9,-9 0,2017 -9,-9 z"
                   id="path9569"
                   inkscape:connector-curvature="0"
                   style="fill:#000000;stroke:none" /><path
                   d="m 16378,6520 -9,9 -4681,0 -9,-9 -9,-9 4717,0 -9,9 z"
                   id="path9571"
                   inkscape:connector-curvature="0"
                   style="fill:#000000;stroke:none" /><path
                   d="m 16378,8519 -9,-9 0,-1981 9,-9 9,9 0,1981 -9,9 z"
                   id="path9573"
                   inkscape:connector-curvature="0"
                   style="fill:#000000;stroke:none" /><path
                   d="m 21079,8519 -9,-9 0,-1981 9,-9 9,-9 0,2017 -9,-9 z"
                   id="path9575"
                   inkscape:connector-curvature="0"
                   style="fill:#000000;stroke:none" /><path
                   d="m 21079,6520 -9,9 -4683,0 -9,-9 -9,-9 4719,0 -9,9 z"
                   id="path9577"
                   inkscape:connector-curvature="0"
                   style="fill:#000000;stroke:none" /><path
                   d="m 6980,10518 -9,9 0,-2017 9,9 9,9 0,1981 -9,9 z"
                   id="path9579"
                   inkscape:connector-curvature="0"
                   style="fill:#000000;stroke:none" /><path
                   d="m 11679,10518 -9,-9 0,-1981 9,-9 9,9 0,1981 -9,9 z"
                   id="path9581"
                   inkscape:connector-curvature="0"
                   style="fill:#000000;stroke:none" /><path
                   d="m 11679,8519 -9,9 -4681,0 -9,-9 9,-9 4681,0 9,9 z"
                   id="path9583"
                   inkscape:connector-curvature="0"
                   style="fill:#000000;stroke:none" /><path
                   d="m 11679,10518 -9,-9 0,-1981 9,-9 9,9 0,1981 -9,9 z"
                   id="path9585"
                   inkscape:connector-curvature="0"
                   style="fill:#000000;stroke:none" /><path
                   d="m 16378,10518 -9,-9 0,-1981 9,-9 9,-9 0,2017 -9,-9 z"
                   id="path9587"
                   inkscape:connector-curvature="0"
                   style="fill:#000000;stroke:none" /><path
                   d="m 16378,8519 -9,9 -4681,0 -9,-9 9,-9 4681,0 9,9 z"
                   id="path9589"
                   inkscape:connector-curvature="0"
                   style="fill:#000000;stroke:none" /><path
                   d="m 16378,10518 -9,-9 0,-1981 9,-9 9,9 0,1981 -9,9 z"
                   id="path9591"
                   inkscape:connector-curvature="0"
                   style="fill:#000000;stroke:none" /><path
                   d="m 21079,10518 -9,-9 0,-1981 9,-9 9,-9 0,2017 -9,-9 z"
                   id="path9593"
                   inkscape:connector-curvature="0"
                   style="fill:#000000;stroke:none" /><path
                   d="m 21079,8519 -9,9 -4683,0 -9,-9 9,-9 4683,0 9,9 z"
                   id="path9595"
                   inkscape:connector-curvature="0"
                   style="fill:#000000;stroke:none" /><path
                   d="m 6980,12517 -9,9 0,-2017 9,9 9,9 0,1981 -9,9 z"
                   id="path9597"
                   inkscape:connector-curvature="0"
                   style="fill:#000000;stroke:none" /><path
                   d="m 11679,12517 -9,-9 0,-1981 9,-9 9,9 0,1981 -9,9 z"
                   id="path9599"
                   inkscape:connector-curvature="0"
                   style="fill:#000000;stroke:none" /><path
                   d="m 11679,10518 -9,9 -4681,0 -9,-9 9,-9 4681,0 9,9 z"
                   id="path9601"
                   inkscape:connector-curvature="0"
                   style="fill:#000000;stroke:none" /><path
                   d="m 11679,12517 -9,-9 0,-1981 9,-9 9,9 0,1981 -9,9 z"
                   id="path9603"
                   inkscape:connector-curvature="0"
                   style="fill:#000000;stroke:none" /><path
                   d="m 16378,12517 -9,-9 0,-1981 9,-9 9,-9 0,2017 -9,-9 z"
                   id="path9605"
                   inkscape:connector-curvature="0"
                   style="fill:#000000;stroke:none" /><path
                   d="m 16378,10518 -9,9 -4681,0 -9,-9 9,-9 4681,0 9,9 z"
                   id="path9607"
                   inkscape:connector-curvature="0"
                   style="fill:#000000;stroke:none" /><path
                   d="m 16378,12517 -9,-9 0,-1981 9,-9 9,9 0,1981 -9,9 z"
                   id="path9609"
                   inkscape:connector-curvature="0"
                   style="fill:#000000;stroke:none" /><path
                   d="m 21079,12517 -9,-9 0,-1981 9,-9 9,-9 0,2017 -9,-9 z"
                   id="path9611"
                   inkscape:connector-curvature="0"
                   style="fill:#000000;stroke:none" /><path
                   d="m 21079,10518 -9,9 -4683,0 -9,-9 9,-9 4683,0 9,9 z"
                   id="path9613"
                   inkscape:connector-curvature="0"
                   style="fill:#000000;stroke:none" /><path
                   d="m 6980,14519 -9,9 0,-2020 9,9 9,9 0,1984 -9,9 z"
                   id="path9615"
                   inkscape:connector-curvature="0"
                   style="fill:#000000;stroke:none" /><path
                   d="m 11679,14519 9,9 -4717,0 9,-9 9,-9 4681,0 9,9 z"
                   id="path9617"
                   inkscape:connector-curvature="0"
                   style="fill:#000000;stroke:none" /><path
                   d="m 11679,14519 -9,-9 0,-1984 9,-9 9,9 0,1984 -9,9 z"
                   id="path9619"
                   inkscape:connector-curvature="0"
                   style="fill:#000000;stroke:none" /><path
                   d="m 11679,12517 -9,9 -4681,0 -9,-9 9,-9 4681,0 9,9 z"
                   id="path9621"
                   inkscape:connector-curvature="0"
                   style="fill:#000000;stroke:none" /><path
                   d="m 11679,14519 -9,-9 0,-1984 9,-9 9,9 0,1984 -9,9 z"
                   id="path9623"
                   inkscape:connector-curvature="0"
                   style="fill:#000000;stroke:none" /><path
                   d="m 16378,14519 9,9 -4717,0 9,-9 9,-9 4681,0 9,9 z"
                   id="path9625"
                   inkscape:connector-curvature="0"
                   style="fill:#000000;stroke:none" /><path
                   d="m 16378,14519 -9,-9 0,-1984 9,-9 9,-9 0,2020 -9,-9 z"
                   id="path9627"
                   inkscape:connector-curvature="0"
                   style="fill:#000000;stroke:none" /><path
                   d="m 16378,12517 -9,9 -4681,0 -9,-9 9,-9 4681,0 9,9 z"
                   id="path9629"
                   inkscape:connector-curvature="0"
                   style="fill:#000000;stroke:none" /><path
                   d="m 16378,14519 -9,-9 0,-1984 9,-9 9,9 0,1984 -9,9 z"
                   id="path9631"
                   inkscape:connector-curvature="0"
                   style="fill:#000000;stroke:none" /><path
                   d="m 21079,14519 9,9 -4719,0 9,-9 9,-9 4683,0 9,9 z"
                   id="path9633"
                   inkscape:connector-curvature="0"
                   style="fill:#000000;stroke:none" /><path
                   d="m 21079,14519 -9,-9 0,-1984 9,-9 9,-9 0,2020 -9,-9 z"
                   id="path9635"
                   inkscape:connector-curvature="0"
                   style="fill:#000000;stroke:none" /><path
                   d="m 21079,12517 -9,9 -4683,0 -9,-9 9,-9 4683,0 9,9 z"
                   id="path9637"
                   inkscape:connector-curvature="0"
                   style="fill:#000000;stroke:none" /></g></g></g></g></g></g></g><script
     type="text/ecmascript"
     id="script9639"><![CDATA[


/*****
* @licstart
*
* The following is the license notice for the part of JavaScript code of this
* page included between the '@jessyinkstart' and the '@jessyinkend' notes.
*/

/*****  ******************************************************************
*
* Copyright 2008-2013 Hannes Hochreiner
*
* The JavaScript code included between the start note '@jessyinkstart'
* and the end note '@jessyinkend' is subject to the terms of the Mozilla
* Public License, v. 2.0. If a copy of the MPL was not distributed with
* this file, You can obtain one at http://mozilla.org/MPL/2.0/.
*
* Alternatively, you can redistribute and/or that part of this file
* under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see http://www.gnu.org/licenses/.
*/

/*****
*  You can find the complete source code of the JessyInk project at:
*  @source http://code.google.com/p/jessyink/
*/

/*****
* @licend
*
* The above is the license notice for the part of JavaScript code of this
* page included between the '@jessyinkstart' and the '@jessyinkend' notes.
*/


/*****
* @jessyinkstart
*
*  The following code is a derivative work of some parts of the JessyInk
*  project.
*  @source http://code.google.com/p/jessyink/
*/

function getElementsByProperty( node, name )
{
var elements = [];

if( node.getAttribute( name ) )
elements.push( node );

for( var counter = 0; counter < node.childNodes.length; ++counter )
{
if( node.childNodes[counter].nodeType == 1 )
{
var subElements = getElementsByProperty( node.childNodes[counter], name );
elements = elements.concat( subElements );
}
}
return elements;
}

function onKeyDown( aEvt )
{
if ( !aEvt )
aEvt = window.event;

var code = aEvt.keyCode || aEvt.charCode;

if( !processingEffect && keyCodeDictionary[currentMode] && keyCodeDictionary[currentMode][code] )
{
return keyCodeDictionary[currentMode][code]();
}
else
{
document.onkeypress = onKeyPress;
return null;
}
}
document.onkeydown = onKeyDown;

function onKeyPress( aEvt )
{
document.onkeypress = null;

if ( !aEvt )
aEvt = window.event;

var str = String.fromCharCode( aEvt.keyCode || aEvt.charCode );

if ( !processingEffect && charCodeDictionary[currentMode] && charCodeDictionary[currentMode][str] )
return charCodeDictionary[currentMode][str]();

return null;
}

function getDefaultKeyCodeDictionary()
{
var keyCodeDict = {};

keyCodeDict[SLIDE_MODE] = {};
keyCodeDict[INDEX_MODE] = {};

keyCodeDict[SLIDE_MODE][LEFT_KEY]
= function() { return aSlideShow.rewindEffect(); };
keyCodeDict[SLIDE_MODE][RIGHT_KEY]
= function() { return dispatchEffects(1); };
keyCodeDict[SLIDE_MODE][UP_KEY]
= function() { return aSlideShow.rewindEffect(); };
keyCodeDict[SLIDE_MODE][DOWN_KEY]
= function() { return skipEffects(1); };
keyCodeDict[SLIDE_MODE][PAGE_UP_KEY]
= function() { return aSlideShow.rewindAllEffects(); };
keyCodeDict[SLIDE_MODE][PAGE_DOWN_KEY]
= function() { return skipAllEffects(); };
keyCodeDict[SLIDE_MODE][HOME_KEY]
= function() { return aSlideShow.displaySlide( 0, true ); };
keyCodeDict[SLIDE_MODE][END_KEY]
= function() { return aSlideShow.displaySlide( theMetaDoc.nNumberOfSlides - 1, true ); };
keyCodeDict[SLIDE_MODE][SPACE_KEY]
= function() { return dispatchEffects(1); };

keyCodeDict[INDEX_MODE][LEFT_KEY]
= function() { return indexSetPageSlide( theSlideIndexPage.selectedSlideIndex - 1 ); };
keyCodeDict[INDEX_MODE][RIGHT_KEY]
= function() { return indexSetPageSlide( theSlideIndexPage.selectedSlideIndex + 1 ); };
keyCodeDict[INDEX_MODE][UP_KEY]
= function() { return indexSetPageSlide( theSlideIndexPage.selectedSlideIndex - theSlideIndexPage.indexColumns ); };
keyCodeDict[INDEX_MODE][DOWN_KEY]
= function() { return indexSetPageSlide( theSlideIndexPage.selectedSlideIndex + theSlideIndexPage.indexColumns ); };
keyCodeDict[INDEX_MODE][PAGE_UP_KEY]
= function() { return indexSetPageSlide( theSlideIndexPage.selectedSlideIndex - theSlideIndexPage.getTotalThumbnails() ); };
keyCodeDict[INDEX_MODE][PAGE_DOWN_KEY]
= function() { return indexSetPageSlide( theSlideIndexPage.selectedSlideIndex + theSlideIndexPage.getTotalThumbnails() ); };
keyCodeDict[INDEX_MODE][HOME_KEY]
= function() { return indexSetPageSlide( 0 ); };
keyCodeDict[INDEX_MODE][END_KEY]
= function() { return indexSetPageSlide( theMetaDoc.nNumberOfSlides - 1 ); };
keyCodeDict[INDEX_MODE][ENTER_KEY]
= function() { return toggleSlideIndex(); };
keyCodeDict[INDEX_MODE][SPACE_KEY]
= function() { return toggleSlideIndex(); };
keyCodeDict[INDEX_MODE][ESCAPE_KEY]
= function() { return abandonIndexMode(); };

return keyCodeDict;
}

function getDefaultCharCodeDictionary()
{
var charCodeDict = {};

charCodeDict[SLIDE_MODE] = {};
charCodeDict[INDEX_MODE] = {};

charCodeDict[SLIDE_MODE]['i']
= function () { return toggleSlideIndex(); };

charCodeDict[INDEX_MODE]['i']
= function () { return toggleSlideIndex(); };
charCodeDict[INDEX_MODE]['-']
= function () { return theSlideIndexPage.decreaseNumberOfColumns(); };
charCodeDict[INDEX_MODE]['=']
= function () { return theSlideIndexPage.increaseNumberOfColumns(); };
charCodeDict[INDEX_MODE]['+']
= function () { return theSlideIndexPage.increaseNumberOfColumns(); };
charCodeDict[INDEX_MODE]['0']
= function () { return theSlideIndexPage.resetNumberOfColumns(); };

return charCodeDict;
}


function slideOnMouseUp( aEvt )
{
if (!aEvt)
aEvt = window.event;

var nOffset = 0;

if( aEvt.button == 0 )
nOffset = 1;
else if( aEvt.button == 2 )
nOffset = -1;

if( 0 != nOffset )
dispatchEffects( nOffset );
return true; // the click has been handled
}

document.handleClick = slideOnMouseUp;


function slideOnMouseWheel(aEvt)
{
var delta = 0;

if (!aEvt)
aEvt = window.event;

if (aEvt.wheelDelta)
{ // IE Opera
delta = aEvt.wheelDelta/120;
}
else if (aEvt.detail)
{ // MOZ
delta = -aEvt.detail/3;
}

if (delta > 0)
skipEffects(-1);
else if (delta < 0)
skipEffects(1);

if (aEvt.preventDefault)
aEvt.preventDefault();

aEvt.returnValue = false;
}

if( window.addEventListener )
{
window.addEventListener( 'DOMMouseScroll', function( aEvt ) { return mouseHandlerDispatch( aEvt, MOUSE_WHEEL ); }, false );
}

window.onmousewheel
= function( aEvt ) { return mouseHandlerDispatch( aEvt, MOUSE_WHEEL ); };

function mouseHandlerDispatch( aEvt, anAction )
{
if( !aEvt )
aEvt = window.event;

var retVal = true;

if ( mouseHandlerDictionary[currentMode] && mouseHandlerDictionary[currentMode][anAction] )
{
var subRetVal = mouseHandlerDictionary[currentMode][anAction]( aEvt );

if( subRetVal != null && subRetVal != undefined )
retVal = subRetVal;
}

if( aEvt.preventDefault && !retVal )
aEvt.preventDefault();

aEvt.returnValue = retVal;

return retVal;
}

document.onmouseup = function( aEvt ) { return mouseHandlerDispatch( aEvt, MOUSE_UP ); };


function mouseClickHelper( aEvt )
{
if( !Detect.isMozilla )
{
var aWindowObject = document.defaultView;
if( aWindowObject )
{
var aTextSelection = aWindowObject.getSelection();
var sSelectedText =  aTextSelection.toString();
if( sSelectedText )
{
DBGLOG( 'text selection: ' + sSelectedText );
if( sLastSelectedText !== sSelectedText )
{
bTextHasBeenSelected = true;
sLastSelectedText = sSelectedText;
}
else
{
bTextHasBeenSelected = false;
}
return null;
}
else if( bTextHasBeenSelected )
{
bTextHasBeenSelected = false;
sLastSelectedText = '';
return null;
}
}
else
{
log( 'error: HyperlinkElement.handleClick: invalid window object.' );
}
}

var aSlideAnimationsHandler = theMetaDoc.aMetaSlideSet[nCurSlide].aSlideAnimationsHandler;
if( aSlideAnimationsHandler )
{
var aCurrentEventMultiplexer = aSlideAnimationsHandler.aEventMultiplexer;
if( aCurrentEventMultiplexer )
{
if( aCurrentEventMultiplexer.hasRegisteredMouseClickHandlers() )
{
return aCurrentEventMultiplexer.notifyMouseClick( aEvt );
}
}
}
return slideOnMouseUp( aEvt );
}


function getDefaultMouseHandlerDictionary()
{
var mouseHandlerDict = {};

mouseHandlerDict[SLIDE_MODE] = {};
mouseHandlerDict[INDEX_MODE] = {};

mouseHandlerDict[SLIDE_MODE][MOUSE_UP]
= mouseClickHelper;

mouseHandlerDict[SLIDE_MODE][MOUSE_WHEEL]
= function( aEvt ) { return slideOnMouseWheel( aEvt ); };

mouseHandlerDict[INDEX_MODE][MOUSE_UP]
= function( aEvt ) { return toggleSlideIndex(); };

return mouseHandlerDict;
}

function indexSetPageSlide( nIndex )
{
var aMetaSlideSet = theMetaDoc.aMetaSlideSet;
nIndex = getSafeIndex( nIndex, 0, aMetaSlideSet.length - 1 );

var nSelectedThumbnailIndex = nIndex % theSlideIndexPage.getTotalThumbnails();
var offset = nIndex - nSelectedThumbnailIndex;

if( offset < 0 )
offset = 0;

if( offset != INDEX_OFFSET )
{
INDEX_OFFSET = offset;
displayIndex( INDEX_OFFSET );
}

theSlideIndexPage.setSelection( nSelectedThumbnailIndex );
}


/*****
* @jessyinkend
*
*  The above code is a derivative work of some parts of the JessyInk project.
*  @source http://code.google.com/p/jessyink/
*/


/*****
* @licstart
*
* The following is the license notice for the part of JavaScript code of this
* page included between the '@dojostart' and the '@dojoend' notes.
*/

/*****  **********************************************************************
*
*  The 'New' BSD License:
*  **********************
*  Copyright (c) 2005-2012, The Dojo Foundation
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without
*  modification, are permitted provided that the following conditions are met:
*
*    * Redistributions of source code must retain the above copyright notice,
*      this list of conditions and the following disclaimer.
*    * Redistributions in binary form must reproduce the above copyright notice,
*      this list of conditions and the following disclaimer in the documentation
*      and/or other materials provided with the distribution.
*    * Neither the name of the Dojo Foundation nor the names of its contributors
*      may be used to endorse or promote products derived from this software
*      without specific prior written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
*  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
*  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
*  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
*  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
*  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
****************************************************************************/


/*****
* @licend
*
* The above is the license notice for the part of JavaScript code of this
* page included between the '@dojostart' and the '@dojoend' notes.
*/


/*****
* @dojostart
*
*  The following code is a derivative work of some part of the dojox.gfx library.
*  @source http://svn.dojotoolkit.org/src/dojox/trunk/_base/sniff.js
*/

function has( name )
{
return has.cache[name];
}

has.cache = {};

has.add = function( name, test )
{
has.cache[name] = test;
};

function configureDetectionTools()
{
if( !navigator )
{
log( 'error: configureDetectionTools: configuration failed' );
return null;
}

var n = navigator,
dua = n.userAgent,
dav = n.appVersion,
tv = parseFloat(dav);

has.add('air', dua.indexOf('AdobeAIR') >= 0);
has.add('khtml', dav.indexOf('Konqueror') >= 0 ? tv : undefined);
has.add('webkit', parseFloat(dua.split('WebKit/')[1]) || undefined);
has.add('chrome', parseFloat(dua.split('Chrome/')[1]) || undefined);
has.add('safari', dav.indexOf('Safari')>=0 && !has('chrome') ? parseFloat(dav.split('Version/')[1]) : undefined);
has.add('mac', dav.indexOf('Macintosh') >= 0);
has.add('quirks', document.compatMode == 'BackCompat');
has.add('ios', /iPhone|iPod|iPad/.test(dua));
has.add('android', parseFloat(dua.split('Android ')[1]) || undefined);

if(!has('webkit')){
if(dua.indexOf('Opera') >= 0){
has.add('opera', tv >= 9.8 ? parseFloat(dua.split('Version/')[1]) || tv : tv);
}

if(dua.indexOf('Gecko') >= 0 && !has('khtml') && !has('webkit')){
has.add('mozilla', tv);
}
if(has('mozilla')){
has.add('ff', parseFloat(dua.split('Firefox/')[1] || dua.split('Minefield/')[1]) || undefined);
}

if(document.all && !has('opera')){
var isIE = parseFloat(dav.split('MSIE ')[1]) || undefined;

var mode = document.documentMode;
if(mode && mode != 5 && Math.floor(isIE) != mode){
isIE = mode;
}

has.add('ie', isIE);
}

has.add('wii', typeof opera != 'undefined' && opera.wiiremote);
}

var detect =
{
isFF: has('ff'),

isIE: has('ie'),

isKhtml: has('khtml'),

isWebKit: has('webkit'),

isMozilla: has('mozilla'),
isMoz: has('mozilla'),

isOpera: has('opera'),

isSafari: has('safari'),

isChrome: has('chrome'),

isMac: has('mac'),

isIos: has('ios'),

isAndroid: has('android'),

isWii: has('wii'),

isQuirks: has('quirks'),

isAir: has('air')
};
return detect;
}

/*****
* @dojoend
*
*  The above code is a derivative work of some part of the dojox.gfx library.
*  @source http://svn.dojotoolkit.org/src/dojox/trunk/_base/sniff.js
*/

/*****
* @licstart
*
* The following is the license notice for the part of JavaScript code of this
* file included between the '@svgpathstart' and the '@svgpathend' notes.
*/

/*****  **********************************************************************
*
*   Copyright 2015 The Chromium Authors. All rights reserved.
*
*   The Chromium Authors can be found at
*   http://src.chromium.org/svn/trunk/src/AUTHORS
*
*   Redistribution and use in source and binary forms, with or without
*   modification, are permitted provided that the following conditions are
*   met:
*
*   * Redistributions of source code must retain the above copyright
*   notice, this list of conditions and the following disclaimer.
*   * Redistributions in binary form must reproduce the above
*   copyright notice, this list of conditions and the following disclaimer
*   in the documentation and/or other materials provided with the
*   distribution.
*   * Neither the name of Google Inc. nor the names of its
*   contributors may be used to endorse or promote products derived from
*   this software without specific prior written permission.
*
*   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
*   'AS IS' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
*   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
*   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
*   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
*   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
*   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
*   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
*   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
*   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
****************************************************************************/

/*****
* @licend
*
* The above is the license notice for the part of JavaScript code of this
* file included between the '@svgpathstart' and the '@svgpathend' notes.
*/


/*****
* @svgpathstart
*
*  The following code is a derivative work of some part of the SVGPathSeg API.
*
*  This API is a drop-in replacement for the SVGPathSeg and SVGPathSegList APIs that were removed from
*  SVG2 (https://lists.w3.org/Archives/Public/www-svg/2015Jun/0044.html), including the latest spec
*  changes which were implemented in Firefox 43 and Chrome 46.
*
*  @source https://github.com/progers/pathseg
*/

(function() { 'use strict';
if (!('SVGPathSeg' in window)) {
window.SVGPathSeg = function(type, typeAsLetter, owningPathSegList) {
this.pathSegType = type;
this.pathSegTypeAsLetter = typeAsLetter;
this._owningPathSegList = owningPathSegList;
};

SVGPathSeg.prototype.classname = 'SVGPathSeg';

SVGPathSeg.PATHSEG_UNKNOWN = 0;
SVGPathSeg.PATHSEG_CLOSEPATH = 1;
SVGPathSeg.PATHSEG_MOVETO_ABS = 2;
SVGPathSeg.PATHSEG_MOVETO_REL = 3;
SVGPathSeg.PATHSEG_LINETO_ABS = 4;
SVGPathSeg.PATHSEG_LINETO_REL = 5;
SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS = 6;
SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL = 7;
SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS = 8;
SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL = 9;
SVGPathSeg.PATHSEG_ARC_ABS = 10;
SVGPathSeg.PATHSEG_ARC_REL = 11;
SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS = 12;
SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL = 13;
SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS = 14;
SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL = 15;
SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS = 16;
SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL = 17;
SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS = 18;
SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL = 19;

SVGPathSeg.prototype._segmentChanged = function() {
if (this._owningPathSegList)
this._owningPathSegList.segmentChanged(this);
};

window.SVGPathSegClosePath = function(owningPathSegList) {
SVGPathSeg.call(this, SVGPathSeg.PATHSEG_CLOSEPATH, 'z', owningPathSegList);
};
SVGPathSegClosePath.prototype = Object.create(SVGPathSeg.prototype);
SVGPathSegClosePath.prototype.toString = function() { return '[object SVGPathSegClosePath]'; };
SVGPathSegClosePath.prototype._asPathString = function() { return this.pathSegTypeAsLetter; };
SVGPathSegClosePath.prototype.clone = function() { return new SVGPathSegClosePath(undefined); };

window.SVGPathSegMovetoAbs = function(owningPathSegList, x, y) {
SVGPathSeg.call(this, SVGPathSeg.PATHSEG_MOVETO_ABS, 'M', owningPathSegList);
this._x = x;
this._y = y;
};
SVGPathSegMovetoAbs.prototype = Object.create(SVGPathSeg.prototype);
SVGPathSegMovetoAbs.prototype.toString = function() { return '[object SVGPathSegMovetoAbs]'; };
SVGPathSegMovetoAbs.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x + ' ' + this._y; };
SVGPathSegMovetoAbs.prototype.clone = function() { return new SVGPathSegMovetoAbs(undefined, this._x, this._y); };
Object.defineProperty(SVGPathSegMovetoAbs.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegMovetoAbs.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegMovetoRel = function(owningPathSegList, x, y) {
SVGPathSeg.call(this, SVGPathSeg.PATHSEG_MOVETO_REL, 'm', owningPathSegList);
this._x = x;
this._y = y;
};
SVGPathSegMovetoRel.prototype = Object.create(SVGPathSeg.prototype);
SVGPathSegMovetoRel.prototype.toString = function() { return '[object SVGPathSegMovetoRel]'; };
SVGPathSegMovetoRel.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x + ' ' + this._y; };
SVGPathSegMovetoRel.prototype.clone = function() { return new SVGPathSegMovetoRel(undefined, this._x, this._y); };
Object.defineProperty(SVGPathSegMovetoRel.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegMovetoRel.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegLinetoAbs = function(owningPathSegList, x, y) {
SVGPathSeg.call(this, SVGPathSeg.PATHSEG_LINETO_ABS, 'L', owningPathSegList);
this._x = x;
this._y = y;
};
SVGPathSegLinetoAbs.prototype = Object.create(SVGPathSeg.prototype);
SVGPathSegLinetoAbs.prototype.toString = function() { return '[object SVGPathSegLinetoAbs]'; };
SVGPathSegLinetoAbs.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x + ' ' + this._y; };
SVGPathSegLinetoAbs.prototype.clone = function() { return new SVGPathSegLinetoAbs(undefined, this._x, this._y); };
Object.defineProperty(SVGPathSegLinetoAbs.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegLinetoAbs.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegLinetoRel = function(owningPathSegList, x, y) {
SVGPathSeg.call(this, SVGPathSeg.PATHSEG_LINETO_REL, 'l', owningPathSegList);
this._x = x;
this._y = y;
};
SVGPathSegLinetoRel.prototype = Object.create(SVGPathSeg.prototype);
SVGPathSegLinetoRel.prototype.toString = function() { return '[object SVGPathSegLinetoRel]'; };
SVGPathSegLinetoRel.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x + ' ' + this._y; };
SVGPathSegLinetoRel.prototype.clone = function() { return new SVGPathSegLinetoRel(undefined, this._x, this._y); };
Object.defineProperty(SVGPathSegLinetoRel.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegLinetoRel.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegCurvetoCubicAbs = function(owningPathSegList, x, y, x1, y1, x2, y2) {
SVGPathSeg.call(this, SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS, 'C', owningPathSegList);
this._x = x;
this._y = y;
this._x1 = x1;
this._y1 = y1;
this._x2 = x2;
this._y2 = y2;
};
SVGPathSegCurvetoCubicAbs.prototype = Object.create(SVGPathSeg.prototype);
SVGPathSegCurvetoCubicAbs.prototype.toString = function() { return '[object SVGPathSegCurvetoCubicAbs]'; };
SVGPathSegCurvetoCubicAbs.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x1 + ' ' + this._y1 + ' ' + this._x2 + ' ' + this._y2 + ' ' + this._x + ' ' + this._y; };
SVGPathSegCurvetoCubicAbs.prototype.clone = function() { return new SVGPathSegCurvetoCubicAbs(undefined, this._x, this._y, this._x1, this._y1, this._x2, this._y2); };
Object.defineProperty(SVGPathSegCurvetoCubicAbs.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegCurvetoCubicAbs.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegCurvetoCubicAbs.prototype, 'x1', { get: function() { return this._x1; }, set: function(x1) { this._x1 = x1; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegCurvetoCubicAbs.prototype, 'y1', { get: function() { return this._y1; }, set: function(y1) { this._y1 = y1; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegCurvetoCubicAbs.prototype, 'x2', { get: function() { return this._x2; }, set: function(x2) { this._x2 = x2; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegCurvetoCubicAbs.prototype, 'y2', { get: function() { return this._y2; }, set: function(y2) { this._y2 = y2; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegCurvetoCubicRel = function(owningPathSegList, x, y, x1, y1, x2, y2) {
SVGPathSeg.call(this, SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL, 'c', owningPathSegList);
this._x = x;
this._y = y;
this._x1 = x1;
this._y1 = y1;
this._x2 = x2;
this._y2 = y2;
};
SVGPathSegCurvetoCubicRel.prototype = Object.create(SVGPathSeg.prototype);
SVGPathSegCurvetoCubicRel.prototype.toString = function() { return '[object SVGPathSegCurvetoCubicRel]'; };
SVGPathSegCurvetoCubicRel.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x1 + ' ' + this._y1 + ' ' + this._x2 + ' ' + this._y2 + ' ' + this._x + ' ' + this._y; };
SVGPathSegCurvetoCubicRel.prototype.clone = function() { return new SVGPathSegCurvetoCubicRel(undefined, this._x, this._y, this._x1, this._y1, this._x2, this._y2); };
Object.defineProperty(SVGPathSegCurvetoCubicRel.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegCurvetoCubicRel.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegCurvetoCubicRel.prototype, 'x1', { get: function() { return this._x1; }, set: function(x1) { this._x1 = x1; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegCurvetoCubicRel.prototype, 'y1', { get: function() { return this._y1; }, set: function(y1) { this._y1 = y1; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegCurvetoCubicRel.prototype, 'x2', { get: function() { return this._x2; }, set: function(x2) { this._x2 = x2; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegCurvetoCubicRel.prototype, 'y2', { get: function() { return this._y2; }, set: function(y2) { this._y2 = y2; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegCurvetoQuadraticAbs = function(owningPathSegList, x, y, x1, y1) {
SVGPathSeg.call(this, SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS, 'Q', owningPathSegList);
this._x = x;
this._y = y;
this._x1 = x1;
this._y1 = y1;
};
SVGPathSegCurvetoQuadraticAbs.prototype = Object.create(SVGPathSeg.prototype);
SVGPathSegCurvetoQuadraticAbs.prototype.toString = function() { return '[object SVGPathSegCurvetoQuadraticAbs]'; };
SVGPathSegCurvetoQuadraticAbs.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x1 + ' ' + this._y1 + ' ' + this._x + ' ' + this._y; };
SVGPathSegCurvetoQuadraticAbs.prototype.clone = function() { return new SVGPathSegCurvetoQuadraticAbs(undefined, this._x, this._y, this._x1, this._y1); };
Object.defineProperty(SVGPathSegCurvetoQuadraticAbs.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegCurvetoQuadraticAbs.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegCurvetoQuadraticAbs.prototype, 'x1', { get: function() { return this._x1; }, set: function(x1) { this._x1 = x1; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegCurvetoQuadraticAbs.prototype, 'y1', { get: function() { return this._y1; }, set: function(y1) { this._y1 = y1; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegCurvetoQuadraticRel = function(owningPathSegList, x, y, x1, y1) {
SVGPathSeg.call(this, SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL, 'q', owningPathSegList);
this._x = x;
this._y = y;
this._x1 = x1;
this._y1 = y1;
};
SVGPathSegCurvetoQuadraticRel.prototype = Object.create(SVGPathSeg.prototype);
SVGPathSegCurvetoQuadraticRel.prototype.toString = function() { return '[object SVGPathSegCurvetoQuadraticRel]'; };
SVGPathSegCurvetoQuadraticRel.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x1 + ' ' + this._y1 + ' ' + this._x + ' ' + this._y; };
SVGPathSegCurvetoQuadraticRel.prototype.clone = function() { return new SVGPathSegCurvetoQuadraticRel(undefined, this._x, this._y, this._x1, this._y1); };
Object.defineProperty(SVGPathSegCurvetoQuadraticRel.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegCurvetoQuadraticRel.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegCurvetoQuadraticRel.prototype, 'x1', { get: function() { return this._x1; }, set: function(x1) { this._x1 = x1; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegCurvetoQuadraticRel.prototype, 'y1', { get: function() { return this._y1; }, set: function(y1) { this._y1 = y1; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegArcAbs = function(owningPathSegList, x, y, r1, r2, angle, largeArcFlag, sweepFlag) {
SVGPathSeg.call(this, SVGPathSeg.PATHSEG_ARC_ABS, 'A', owningPathSegList);
this._x = x;
this._y = y;
this._r1 = r1;
this._r2 = r2;
this._angle = angle;
this._largeArcFlag = largeArcFlag;
this._sweepFlag = sweepFlag;
};
SVGPathSegArcAbs.prototype = Object.create(SVGPathSeg.prototype);
SVGPathSegArcAbs.prototype.toString = function() { return '[object SVGPathSegArcAbs]'; };
SVGPathSegArcAbs.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._r1 + ' ' + this._r2 + ' ' + this._angle + ' ' + (this._largeArcFlag ? '1' : '0') + ' ' + (this._sweepFlag ? '1' : '0') + ' ' + this._x + ' ' + this._y; };
SVGPathSegArcAbs.prototype.clone = function() { return new SVGPathSegArcAbs(undefined, this._x, this._y, this._r1, this._r2, this._angle, this._largeArcFlag, this._sweepFlag); };
Object.defineProperty(SVGPathSegArcAbs.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegArcAbs.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegArcAbs.prototype, 'r1', { get: function() { return this._r1; }, set: function(r1) { this._r1 = r1; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegArcAbs.prototype, 'r2', { get: function() { return this._r2; }, set: function(r2) { this._r2 = r2; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegArcAbs.prototype, 'angle', { get: function() { return this._angle; }, set: function(angle) { this._angle = angle; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegArcAbs.prototype, 'largeArcFlag', { get: function() { return this._largeArcFlag; }, set: function(largeArcFlag) { this._largeArcFlag = largeArcFlag; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegArcAbs.prototype, 'sweepFlag', { get: function() { return this._sweepFlag; }, set: function(sweepFlag) { this._sweepFlag = sweepFlag; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegArcRel = function(owningPathSegList, x, y, r1, r2, angle, largeArcFlag, sweepFlag) {
SVGPathSeg.call(this, SVGPathSeg.PATHSEG_ARC_REL, 'a', owningPathSegList);
this._x = x;
this._y = y;
this._r1 = r1;
this._r2 = r2;
this._angle = angle;
this._largeArcFlag = largeArcFlag;
this._sweepFlag = sweepFlag;
};
SVGPathSegArcRel.prototype = Object.create(SVGPathSeg.prototype);
SVGPathSegArcRel.prototype.toString = function() { return '[object SVGPathSegArcRel]'; };
SVGPathSegArcRel.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._r1 + ' ' + this._r2 + ' ' + this._angle + ' ' + (this._largeArcFlag ? '1' : '0') + ' ' + (this._sweepFlag ? '1' : '0') + ' ' + this._x + ' ' + this._y; };
SVGPathSegArcRel.prototype.clone = function() { return new SVGPathSegArcRel(undefined, this._x, this._y, this._r1, this._r2, this._angle, this._largeArcFlag, this._sweepFlag); };
Object.defineProperty(SVGPathSegArcRel.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegArcRel.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegArcRel.prototype, 'r1', { get: function() { return this._r1; }, set: function(r1) { this._r1 = r1; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegArcRel.prototype, 'r2', { get: function() { return this._r2; }, set: function(r2) { this._r2 = r2; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegArcRel.prototype, 'angle', { get: function() { return this._angle; }, set: function(angle) { this._angle = angle; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegArcRel.prototype, 'largeArcFlag', { get: function() { return this._largeArcFlag; }, set: function(largeArcFlag) { this._largeArcFlag = largeArcFlag; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegArcRel.prototype, 'sweepFlag', { get: function() { return this._sweepFlag; }, set: function(sweepFlag) { this._sweepFlag = sweepFlag; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegLinetoHorizontalAbs = function(owningPathSegList, x) {
SVGPathSeg.call(this, SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS, 'H', owningPathSegList);
this._x = x;
};
SVGPathSegLinetoHorizontalAbs.prototype = Object.create(SVGPathSeg.prototype);
SVGPathSegLinetoHorizontalAbs.prototype.toString = function() { return '[object SVGPathSegLinetoHorizontalAbs]'; };
SVGPathSegLinetoHorizontalAbs.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x; };
SVGPathSegLinetoHorizontalAbs.prototype.clone = function() { return new SVGPathSegLinetoHorizontalAbs(undefined, this._x); };
Object.defineProperty(SVGPathSegLinetoHorizontalAbs.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegLinetoHorizontalRel = function(owningPathSegList, x) {
SVGPathSeg.call(this, SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL, 'h', owningPathSegList);
this._x = x;
};
SVGPathSegLinetoHorizontalRel.prototype = Object.create(SVGPathSeg.prototype);
SVGPathSegLinetoHorizontalRel.prototype.toString = function() { return '[object SVGPathSegLinetoHorizontalRel]'; };
SVGPathSegLinetoHorizontalRel.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x; };
SVGPathSegLinetoHorizontalRel.prototype.clone = function() { return new SVGPathSegLinetoHorizontalRel(undefined, this._x); };
Object.defineProperty(SVGPathSegLinetoHorizontalRel.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegLinetoVerticalAbs = function(owningPathSegList, y) {
SVGPathSeg.call(this, SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS, 'V', owningPathSegList);
this._y = y;
};
SVGPathSegLinetoVerticalAbs.prototype = Object.create(SVGPathSeg.prototype);
SVGPathSegLinetoVerticalAbs.prototype.toString = function() { return '[object SVGPathSegLinetoVerticalAbs]'; };
SVGPathSegLinetoVerticalAbs.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._y; };
SVGPathSegLinetoVerticalAbs.prototype.clone = function() { return new SVGPathSegLinetoVerticalAbs(undefined, this._y); };
Object.defineProperty(SVGPathSegLinetoVerticalAbs.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegLinetoVerticalRel = function(owningPathSegList, y) {
SVGPathSeg.call(this, SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL, 'v', owningPathSegList);
this._y = y;
};
SVGPathSegLinetoVerticalRel.prototype = Object.create(SVGPathSeg.prototype);
SVGPathSegLinetoVerticalRel.prototype.toString = function() { return '[object SVGPathSegLinetoVerticalRel]'; };
SVGPathSegLinetoVerticalRel.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._y; };
SVGPathSegLinetoVerticalRel.prototype.clone = function() { return new SVGPathSegLinetoVerticalRel(undefined, this._y); };
Object.defineProperty(SVGPathSegLinetoVerticalRel.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegCurvetoCubicSmoothAbs = function(owningPathSegList, x, y, x2, y2) {
SVGPathSeg.call(this, SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS, 'S', owningPathSegList);
this._x = x;
this._y = y;
this._x2 = x2;
this._y2 = y2;
};
SVGPathSegCurvetoCubicSmoothAbs.prototype = Object.create(SVGPathSeg.prototype);
SVGPathSegCurvetoCubicSmoothAbs.prototype.toString = function() { return '[object SVGPathSegCurvetoCubicSmoothAbs]'; };
SVGPathSegCurvetoCubicSmoothAbs.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x2 + ' ' + this._y2 + ' ' + this._x + ' ' + this._y; };
SVGPathSegCurvetoCubicSmoothAbs.prototype.clone = function() { return new SVGPathSegCurvetoCubicSmoothAbs(undefined, this._x, this._y, this._x2, this._y2); };
Object.defineProperty(SVGPathSegCurvetoCubicSmoothAbs.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegCurvetoCubicSmoothAbs.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegCurvetoCubicSmoothAbs.prototype, 'x2', { get: function() { return this._x2; }, set: function(x2) { this._x2 = x2; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegCurvetoCubicSmoothAbs.prototype, 'y2', { get: function() { return this._y2; }, set: function(y2) { this._y2 = y2; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegCurvetoCubicSmoothRel = function(owningPathSegList, x, y, x2, y2) {
SVGPathSeg.call(this, SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL, 's', owningPathSegList);
this._x = x;
this._y = y;
this._x2 = x2;
this._y2 = y2;
};
SVGPathSegCurvetoCubicSmoothRel.prototype = Object.create(SVGPathSeg.prototype);
SVGPathSegCurvetoCubicSmoothRel.prototype.toString = function() { return '[object SVGPathSegCurvetoCubicSmoothRel]'; };
SVGPathSegCurvetoCubicSmoothRel.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x2 + ' ' + this._y2 + ' ' + this._x + ' ' + this._y; };
SVGPathSegCurvetoCubicSmoothRel.prototype.clone = function() { return new SVGPathSegCurvetoCubicSmoothRel(undefined, this._x, this._y, this._x2, this._y2); };
Object.defineProperty(SVGPathSegCurvetoCubicSmoothRel.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegCurvetoCubicSmoothRel.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegCurvetoCubicSmoothRel.prototype, 'x2', { get: function() { return this._x2; }, set: function(x2) { this._x2 = x2; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegCurvetoCubicSmoothRel.prototype, 'y2', { get: function() { return this._y2; }, set: function(y2) { this._y2 = y2; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegCurvetoQuadraticSmoothAbs = function(owningPathSegList, x, y) {
SVGPathSeg.call(this, SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS, 'T', owningPathSegList);
this._x = x;
this._y = y;
};
SVGPathSegCurvetoQuadraticSmoothAbs.prototype = Object.create(SVGPathSeg.prototype);
SVGPathSegCurvetoQuadraticSmoothAbs.prototype.toString = function() { return '[object SVGPathSegCurvetoQuadraticSmoothAbs]'; };
SVGPathSegCurvetoQuadraticSmoothAbs.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x + ' ' + this._y; };
SVGPathSegCurvetoQuadraticSmoothAbs.prototype.clone = function() { return new SVGPathSegCurvetoQuadraticSmoothAbs(undefined, this._x, this._y); };
Object.defineProperty(SVGPathSegCurvetoQuadraticSmoothAbs.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegCurvetoQuadraticSmoothAbs.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegCurvetoQuadraticSmoothRel = function(owningPathSegList, x, y) {
SVGPathSeg.call(this, SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL, 't', owningPathSegList);
this._x = x;
this._y = y;
};
SVGPathSegCurvetoQuadraticSmoothRel.prototype = Object.create(SVGPathSeg.prototype);
SVGPathSegCurvetoQuadraticSmoothRel.prototype.toString = function() { return '[object SVGPathSegCurvetoQuadraticSmoothRel]'; };
SVGPathSegCurvetoQuadraticSmoothRel.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x + ' ' + this._y; };
SVGPathSegCurvetoQuadraticSmoothRel.prototype.clone = function() { return new SVGPathSegCurvetoQuadraticSmoothRel(undefined, this._x, this._y); };
Object.defineProperty(SVGPathSegCurvetoQuadraticSmoothRel.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegCurvetoQuadraticSmoothRel.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });

SVGPathElement.prototype.createSVGPathSegClosePath = function() { return new SVGPathSegClosePath(undefined); };
SVGPathElement.prototype.createSVGPathSegMovetoAbs = function(x, y) { return new SVGPathSegMovetoAbs(undefined, x, y); };
SVGPathElement.prototype.createSVGPathSegMovetoRel = function(x, y) { return new SVGPathSegMovetoRel(undefined, x, y); };
SVGPathElement.prototype.createSVGPathSegLinetoAbs = function(x, y) { return new SVGPathSegLinetoAbs(undefined, x, y); };
SVGPathElement.prototype.createSVGPathSegLinetoRel = function(x, y) { return new SVGPathSegLinetoRel(undefined, x, y); };
SVGPathElement.prototype.createSVGPathSegCurvetoCubicAbs = function(x, y, x1, y1, x2, y2) { return new SVGPathSegCurvetoCubicAbs(undefined, x, y, x1, y1, x2, y2); };
SVGPathElement.prototype.createSVGPathSegCurvetoCubicRel = function(x, y, x1, y1, x2, y2) { return new SVGPathSegCurvetoCubicRel(undefined, x, y, x1, y1, x2, y2); };
SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticAbs = function(x, y, x1, y1) { return new SVGPathSegCurvetoQuadraticAbs(undefined, x, y, x1, y1); };
SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticRel = function(x, y, x1, y1) { return new SVGPathSegCurvetoQuadraticRel(undefined, x, y, x1, y1); };
SVGPathElement.prototype.createSVGPathSegArcAbs = function(x, y, r1, r2, angle, largeArcFlag, sweepFlag) { return new SVGPathSegArcAbs(undefined, x, y, r1, r2, angle, largeArcFlag, sweepFlag); }
SVGPathElement.prototype.createSVGPathSegArcRel = function(x, y, r1, r2, angle, largeArcFlag, sweepFlag) { return new SVGPathSegArcRel(undefined, x, y, r1, r2, angle, largeArcFlag, sweepFlag); }
SVGPathElement.prototype.createSVGPathSegLinetoHorizontalAbs = function(x) { return new SVGPathSegLinetoHorizontalAbs(undefined, x); };
SVGPathElement.prototype.createSVGPathSegLinetoHorizontalRel = function(x) { return new SVGPathSegLinetoHorizontalRel(undefined, x); };
SVGPathElement.prototype.createSVGPathSegLinetoVerticalAbs = function(y) { return new SVGPathSegLinetoVerticalAbs(undefined, y); };
SVGPathElement.prototype.createSVGPathSegLinetoVerticalRel = function(y) { return new SVGPathSegLinetoVerticalRel(undefined, y); };
SVGPathElement.prototype.createSVGPathSegCurvetoCubicSmoothAbs = function(x, y, x2, y2) { return new SVGPathSegCurvetoCubicSmoothAbs(undefined, x, y, x2, y2); };
SVGPathElement.prototype.createSVGPathSegCurvetoCubicSmoothRel = function(x, y, x2, y2) { return new SVGPathSegCurvetoCubicSmoothRel(undefined, x, y, x2, y2); };
SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticSmoothAbs = function(x, y) { return new SVGPathSegCurvetoQuadraticSmoothAbs(undefined, x, y); };
SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticSmoothRel = function(x, y) { return new SVGPathSegCurvetoQuadraticSmoothRel(undefined, x, y); };
}

if (!('SVGPathSegList' in window)) {
window.SVGPathSegList = function(pathElement) {
this._pathElement = pathElement;
this._list = this._parsePath(this._pathElement.getAttribute('d'));

this._mutationObserverConfig = { 'attributes': true, 'attributeFilter': ['d'] };
this._pathElementMutationObserver = new MutationObserver(this._updateListFromPathMutations.bind(this));
this._pathElement